{"ast":null,"code":"import _asyncToGenerator from \"/home/danny/Documents/Programming/Solar/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createClass from \"/home/danny/Documents/Programming/Solar/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/danny/Documents/Programming/Solar/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"/home/danny/Documents/Programming/Solar/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/danny/Documents/Programming/Solar/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/danny/Documents/Programming/Solar/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/home/danny/Documents/Programming/Solar/node_modules/@babel/runtime/regenerator/index.js\";\nimport { Vector3, Ray, Loader, FileLoader, MeshStandardMaterial, LineBasicMaterial, ShaderMaterial, UniformsUtils, UniformsLib, Color, BufferGeometry, BufferAttribute, LineSegments, Mesh, Matrix4, Group } from 'three';\n\n// Note: \"MATERIAL\" tag (e.g. GLITTER, SPECKLE) is not implemented\n\nvar FINISH_TYPE_DEFAULT = 0;\nvar FINISH_TYPE_CHROME = 1;\nvar FINISH_TYPE_PEARLESCENT = 2;\nvar FINISH_TYPE_RUBBER = 3;\nvar FINISH_TYPE_MATTE_METALLIC = 4;\nvar FINISH_TYPE_METAL = 5; // State machine to search a subobject path.\n// The LDraw standard establishes these various possible subfolders.\n\nvar FILE_LOCATION_AS_IS = 0;\nvar FILE_LOCATION_TRY_PARTS = 1;\nvar FILE_LOCATION_TRY_P = 2;\nvar FILE_LOCATION_TRY_MODELS = 3;\nvar FILE_LOCATION_TRY_RELATIVE = 4;\nvar FILE_LOCATION_TRY_ABSOLUTE = 5;\nvar FILE_LOCATION_NOT_FOUND = 6;\nvar MAIN_COLOUR_CODE = '16';\nvar MAIN_EDGE_COLOUR_CODE = '24';\nvar _tempVec0 = new Vector3();\nvar _tempVec1 = new Vector3();\nvar LDrawConditionalLineMaterial = /*#__PURE__*/function (_ShaderMaterial) {\n  _inherits(LDrawConditionalLineMaterial, _ShaderMaterial);\n  var _super = _createSuper(LDrawConditionalLineMaterial);\n  function LDrawConditionalLineMaterial(parameters) {\n    var _this;\n    _classCallCheck(this, LDrawConditionalLineMaterial);\n    _this = _super.call(this, {\n      uniforms: UniformsUtils.merge([UniformsLib.fog, {\n        diffuse: {\n          value: new Color()\n        },\n        opacity: {\n          value: 1.0\n        }\n      }]),\n      vertexShader: /* glsl */\"\\n        attribute vec3 control0;\\n        attribute vec3 control1;\\n        attribute vec3 direction;\\n        varying float discardFlag;\\n\\n        #include <common>\\n        #include <color_pars_vertex>\\n        #include <fog_pars_vertex>\\n        #include <logdepthbuf_pars_vertex>\\n        #include <clipping_planes_pars_vertex>\\n\\n        void main() {\\n          #include <color_vertex>\\n\\n          vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\\n          gl_Position = projectionMatrix * mvPosition;\\n\\n          // Transform the line segment ends and control points into camera clip space\\n          vec4 c0 = projectionMatrix * modelViewMatrix * vec4(control0, 1.0);\\n          vec4 c1 = projectionMatrix * modelViewMatrix * vec4(control1, 1.0);\\n          vec4 p0 = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n          vec4 p1 = projectionMatrix * modelViewMatrix * vec4(position + direction, 1.0);\\n\\n          c0.xy /= c0.w;\\n          c1.xy /= c1.w;\\n          p0.xy /= p0.w;\\n          p1.xy /= p1.w;\\n\\n          // Get the direction of the segment and an orthogonal vector\\n          vec2 dir = p1.xy - p0.xy;\\n          vec2 norm = vec2(-dir.y, dir.x);\\n\\n          // Get control point directions from the line\\n          vec2 c0dir = c0.xy - p1.xy;\\n          vec2 c1dir = c1.xy - p1.xy;\\n\\n          // If the vectors to the controls points are pointed in different directions away\\n          // from the line segment then the line should not be drawn.\\n          float d0 = dot(normalize(norm), normalize(c0dir));\\n          float d1 = dot(normalize(norm), normalize(c1dir));\\n          discardFlag = float(sign(d0) != sign(d1));\\n\\n          #include <logdepthbuf_vertex>\\n          #include <clipping_planes_vertex>\\n          #include <fog_vertex>\\n        }\\n      \",\n      fragmentShader: /* glsl */\"\\n        uniform vec3 diffuse;\\n        uniform float opacity;\\n        varying float discardFlag;\\n\\n        #include <common>\\n        #include <color_pars_fragment>\\n        #include <fog_pars_fragment>\\n        #include <logdepthbuf_pars_fragment>\\n        #include <clipping_planes_pars_fragment>\\n\\n        void main() {\\n          if (discardFlag > 0.5) discard;\\n\\n          #include <clipping_planes_fragment>\\n          vec3 outgoingLight = vec3(0.0);\\n          vec4 diffuseColor = vec4(diffuse, opacity);\\n          #include <logdepthbuf_fragment>\\n          #include <color_fragment>\\n          outgoingLight = diffuseColor.rgb; // simple shader\\n          gl_FragColor = vec4(outgoingLight, diffuseColor.a);\\n          #include <tonemapping_fragment>\\n          #include <encodings_fragment>\\n          #include <fog_fragment>\\n          #include <premultiplied_alpha_fragment>\\n        }\\n      \"\n    });\n    Object.defineProperties(_assertThisInitialized(_this), {\n      opacity: {\n        get: function get() {\n          return this.uniforms.opacity.value;\n        },\n        set: function set(value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      color: {\n        get: function get() {\n          return this.uniforms.diffuse.value;\n        }\n      }\n    });\n    _this.setValues(parameters);\n    _this.isLDrawConditionalLineMaterial = true;\n    return _this;\n  }\n  return LDrawConditionalLineMaterial;\n}(ShaderMaterial);\nvar ConditionalLineSegments = /*#__PURE__*/function (_LineSegments) {\n  _inherits(ConditionalLineSegments, _LineSegments);\n  var _super2 = _createSuper(ConditionalLineSegments);\n  function ConditionalLineSegments(geometry, material) {\n    var _this2;\n    _classCallCheck(this, ConditionalLineSegments);\n    _this2 = _super2.call(this, geometry, material);\n    _this2.isConditionalLine = true;\n    return _this2;\n  }\n  return ConditionalLineSegments;\n}(LineSegments);\nfunction generateFaceNormals(faces) {\n  for (var i = 0, l = faces.length; i < l; i++) {\n    var face = faces[i];\n    var vertices = face.vertices;\n    var v0 = vertices[0];\n    var v1 = vertices[1];\n    var v2 = vertices[2];\n    _tempVec0.subVectors(v1, v0);\n    _tempVec1.subVectors(v2, v1);\n    face.faceNormal = new Vector3().crossVectors(_tempVec0, _tempVec1).normalize();\n  }\n}\nvar _ray = new Ray();\nfunction smoothNormals(faces, lineSegments) {\n  var checkSubSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  // NOTE: 1e2 is pretty coarse but was chosen to quantize the resulting value because\n  // it allows edges to be smoothed as expected (see minifig arms).\n  // --\n  // And the vector values are initialize multiplied by 1 + 1e-10 to account for floating\n  // point errors on vertices along quantization boundaries. Ie after matrix multiplication\n  // vertices that should be merged might be set to \"1.7\" and \"1.6999...\" meaning they won't\n  // get merged. This added epsilon attempts to push these error values to the same quantized\n  // value for the sake of hashing. See \"AT-ST mini\" dishes. See mrdoob/three#23169.\n  var hashMultiplier = (1 + 1e-10) * 1e2;\n  function hashVertex(v) {\n    var x = ~~(v.x * hashMultiplier);\n    var y = ~~(v.y * hashMultiplier);\n    var z = ~~(v.z * hashMultiplier);\n    return \"\".concat(x, \",\").concat(y, \",\").concat(z);\n  }\n  function hashEdge(v0, v1) {\n    return \"\".concat(hashVertex(v0), \"_\").concat(hashVertex(v1));\n  } // converts the two vertices to a ray with a normalized direction and origin of 0, 0, 0 projected\n  // onto the original line.\n\n  function toNormalizedRay(v0, v1, targetRay) {\n    targetRay.direction.subVectors(v1, v0).normalize();\n    var scalar = v0.dot(targetRay.direction);\n    targetRay.origin.copy(v0).addScaledVector(targetRay.direction, -scalar);\n    return targetRay;\n  }\n  function hashRay(ray) {\n    return hashEdge(ray.origin, ray.direction);\n  }\n  var hardEdges = new Set();\n  var hardEdgeRays = new Map();\n  var halfEdgeList = {};\n  var normals = []; // Save the list of hard edges by hash\n\n  for (var i = 0, l = lineSegments.length; i < l; i++) {\n    var ls = lineSegments[i];\n    var vertices = ls.vertices;\n    var v0 = vertices[0];\n    var v1 = vertices[1];\n    hardEdges.add(hashEdge(v0, v1));\n    hardEdges.add(hashEdge(v1, v0)); // only generate the hard edge ray map if we're checking subsegments because it's more expensive to check\n    // and requires more memory.\n\n    if (checkSubSegments) {\n      // add both ray directions to the map\n      var ray = toNormalizedRay(v0, v1, new Ray());\n      var rh1 = hashRay(ray);\n      if (!hardEdgeRays.has(rh1)) {\n        toNormalizedRay(v1, v0, ray);\n        var rh2 = hashRay(ray);\n        var _info = {\n          ray: ray,\n          distances: []\n        };\n        hardEdgeRays.set(rh1, _info);\n        hardEdgeRays.set(rh2, _info);\n      } // store both segments ends in min, max order in the distances array to check if a face edge is a\n      // subsegment later.\n\n      var info = hardEdgeRays.get(rh1);\n      var d0 = info.ray.direction.dot(v0);\n      var d1 = info.ray.direction.dot(v1);\n      if (d0 > d1) {\n        var _ref = [d1, d0];\n        d0 = _ref[0];\n        d1 = _ref[1];\n      }\n      info.distances.push(d0, d1);\n    }\n  } // track the half edges associated with each triangle\n\n  for (var _i = 0, _l = faces.length; _i < _l; _i++) {\n    var tri = faces[_i];\n    var _vertices = tri.vertices;\n    var vertCount = _vertices.length;\n    for (var i2 = 0; i2 < vertCount; i2++) {\n      var index = i2;\n      var next = (i2 + 1) % vertCount;\n      var _v = _vertices[index];\n      var _v2 = _vertices[next];\n      var hash = hashEdge(_v, _v2); // don't add the triangle if the edge is supposed to be hard\n\n      if (hardEdges.has(hash)) {\n        continue;\n      } // if checking subsegments then check to see if this edge lies on a hard edge ray and whether its within any ray bounds\n\n      if (checkSubSegments) {\n        toNormalizedRay(_v, _v2, _ray);\n        var rayHash = hashRay(_ray);\n        if (hardEdgeRays.has(rayHash)) {\n          var _info3 = hardEdgeRays.get(rayHash);\n          var _ray2 = _info3.ray,\n            distances = _info3.distances;\n          var _d = _ray2.direction.dot(_v);\n          var _d2 = _ray2.direction.dot(_v2);\n          if (_d > _d2) {\n            var _ref2 = [_d2, _d];\n            _d = _ref2[0];\n            _d2 = _ref2[1];\n          } // return early if the face edge is found to be a subsegment of a line edge meaning the edge will have \"hard\" normals\n\n          var found = false;\n          for (var _i2 = 0, _l2 = distances.length; _i2 < _l2; _i2 += 2) {\n            if (_d >= distances[_i2] && _d2 <= distances[_i2 + 1]) {\n              found = true;\n              break;\n            }\n          }\n          if (found) {\n            continue;\n          }\n        }\n      }\n      var _info2 = {\n        index: index,\n        tri: tri\n      };\n      halfEdgeList[hash] = _info2;\n    }\n  } // Iterate until we've tried to connect all faces to share normals\n\n  while (true) {\n    // Stop if there are no more faces left\n    var halfEdge = null;\n    for (var key in halfEdgeList) {\n      halfEdge = halfEdgeList[key];\n      break;\n    }\n    if (halfEdge === null) {\n      break;\n    } // Exhaustively find all connected faces\n\n    var queue = [halfEdge];\n    while (queue.length > 0) {\n      // initialize all vertex normals in this triangle\n      var _tri = queue.pop().tri;\n      var _vertices2 = _tri.vertices;\n      var vertNormals = _tri.normals;\n      var faceNormal = _tri.faceNormal; // Check if any edge is connected to another triangle edge\n\n      var _vertCount = _vertices2.length;\n      for (var _i3 = 0; _i3 < _vertCount; _i3++) {\n        var _index = _i3;\n        var _next = (_i3 + 1) % _vertCount;\n        var _v3 = _vertices2[_index];\n        var _v4 = _vertices2[_next]; // delete this triangle from the list so it won't be found again\n\n        var _hash = hashEdge(_v3, _v4);\n        delete halfEdgeList[_hash];\n        var reverseHash = hashEdge(_v4, _v3);\n        var otherInfo = halfEdgeList[reverseHash];\n        if (otherInfo) {\n          var otherTri = otherInfo.tri;\n          var otherIndex = otherInfo.index;\n          var otherNormals = otherTri.normals;\n          var otherVertCount = otherNormals.length;\n          var otherFaceNormal = otherTri.faceNormal; // NOTE: If the angle between faces is > 67.5 degrees then assume it's\n          // hard edge. There are some cases where the line segments do not line up exactly\n          // with or span multiple triangle edges (see Lunar Vehicle wheels).\n\n          if (Math.abs(otherTri.faceNormal.dot(_tri.faceNormal)) < 0.25) {\n            continue;\n          } // if this triangle has already been traversed then it won't be in\n          // the halfEdgeList. If it has not then add it to the queue and delete\n          // it so it won't be found again.\n\n          if (reverseHash in halfEdgeList) {\n            queue.push(otherInfo);\n            delete halfEdgeList[reverseHash];\n          } // share the first normal\n\n          var otherNext = (otherIndex + 1) % otherVertCount;\n          if (vertNormals[_index] && otherNormals[otherNext] && vertNormals[_index] !== otherNormals[otherNext]) {\n            otherNormals[otherNext].norm.add(vertNormals[_index].norm);\n            vertNormals[_index].norm = otherNormals[otherNext].norm;\n          }\n          var sharedNormal1 = vertNormals[_index] || otherNormals[otherNext];\n          if (sharedNormal1 === null) {\n            // it's possible to encounter an edge of a triangle that has already been traversed meaning\n            // both edges already have different normals defined and shared. To work around this we create\n            // a wrapper object so when those edges are merged the normals can be updated everywhere.\n            sharedNormal1 = {\n              norm: new Vector3()\n            };\n            normals.push(sharedNormal1.norm);\n          }\n          if (vertNormals[_index] === null) {\n            vertNormals[_index] = sharedNormal1;\n            sharedNormal1.norm.add(faceNormal);\n          }\n          if (otherNormals[otherNext] === null) {\n            otherNormals[otherNext] = sharedNormal1;\n            sharedNormal1.norm.add(otherFaceNormal);\n          } // share the second normal\n\n          if (vertNormals[_next] && otherNormals[otherIndex] && vertNormals[_next] !== otherNormals[otherIndex]) {\n            otherNormals[otherIndex].norm.add(vertNormals[_next].norm);\n            vertNormals[_next].norm = otherNormals[otherIndex].norm;\n          }\n          var sharedNormal2 = vertNormals[_next] || otherNormals[otherIndex];\n          if (sharedNormal2 === null) {\n            sharedNormal2 = {\n              norm: new Vector3()\n            };\n            normals.push(sharedNormal2.norm);\n          }\n          if (vertNormals[_next] === null) {\n            vertNormals[_next] = sharedNormal2;\n            sharedNormal2.norm.add(faceNormal);\n          }\n          if (otherNormals[otherIndex] === null) {\n            otherNormals[otherIndex] = sharedNormal2;\n            sharedNormal2.norm.add(otherFaceNormal);\n          }\n        }\n      }\n    }\n  } // The normals of each face have been added up so now we average them by normalizing the vector.\n\n  for (var _i4 = 0, _l3 = normals.length; _i4 < _l3; _i4++) {\n    normals[_i4].normalize();\n  }\n}\nfunction isPartType(type) {\n  return type === 'Part' || type === 'Unofficial_Part';\n}\nfunction isPrimitiveType(type) {\n  return /primitive/i.test(type) || type === 'Subpart';\n}\nvar LineParser = /*#__PURE__*/function () {\n  function LineParser(line, lineNumber) {\n    _classCallCheck(this, LineParser);\n    this.line = line;\n    this.lineLength = line.length;\n    this.currentCharIndex = 0;\n    this.currentChar = ' ';\n    this.lineNumber = lineNumber;\n  }\n  _createClass(LineParser, [{\n    key: \"seekNonSpace\",\n    value: function seekNonSpace() {\n      while (this.currentCharIndex < this.lineLength) {\n        this.currentChar = this.line.charAt(this.currentCharIndex);\n        if (this.currentChar !== ' ' && this.currentChar !== '\\t') {\n          return;\n        }\n        this.currentCharIndex++;\n      }\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      var pos0 = this.currentCharIndex++; // Seek space\n\n      while (this.currentCharIndex < this.lineLength) {\n        this.currentChar = this.line.charAt(this.currentCharIndex);\n        if (this.currentChar === ' ' || this.currentChar === '\\t') {\n          break;\n        }\n        this.currentCharIndex++;\n      }\n      var pos1 = this.currentCharIndex;\n      this.seekNonSpace();\n      return this.line.substring(pos0, pos1);\n    }\n  }, {\n    key: \"getVector\",\n    value: function getVector() {\n      return new Vector3(parseFloat(this.getToken()), parseFloat(this.getToken()), parseFloat(this.getToken()));\n    }\n  }, {\n    key: \"getRemainingString\",\n    value: function getRemainingString() {\n      return this.line.substring(this.currentCharIndex, this.lineLength);\n    }\n  }, {\n    key: \"isAtTheEnd\",\n    value: function isAtTheEnd() {\n      return this.currentCharIndex >= this.lineLength;\n    }\n  }, {\n    key: \"setToEnd\",\n    value: function setToEnd() {\n      this.currentCharIndex = this.lineLength;\n    }\n  }, {\n    key: \"getLineNumberString\",\n    value: function getLineNumberString() {\n      return this.lineNumber >= 0 ? ' at line ' + this.lineNumber : '';\n    }\n  }]);\n  return LineParser;\n}(); // Fetches and parses an intermediate representation of LDraw parts files.\nvar LDrawParsedCache = /*#__PURE__*/function () {\n  function LDrawParsedCache(loader) {\n    _classCallCheck(this, LDrawParsedCache);\n    this.loader = loader;\n    this._cache = {};\n  }\n  _createClass(LDrawParsedCache, [{\n    key: \"cloneResult\",\n    value: function cloneResult(original) {\n      var result = {}; // vertices are transformed and normals computed before being converted to geometry\n      // so these pieces must be cloned.\n\n      result.faces = original.faces.map(function (face) {\n        return {\n          colorCode: face.colorCode,\n          material: face.material,\n          vertices: face.vertices.map(function (v) {\n            return v.clone();\n          }),\n          normals: face.normals.map(function () {\n            return null;\n          }),\n          faceNormal: null\n        };\n      });\n      result.conditionalSegments = original.conditionalSegments.map(function (face) {\n        return {\n          colorCode: face.colorCode,\n          material: face.material,\n          vertices: face.vertices.map(function (v) {\n            return v.clone();\n          }),\n          controlPoints: face.controlPoints.map(function (v) {\n            return v.clone();\n          })\n        };\n      });\n      result.lineSegments = original.lineSegments.map(function (face) {\n        return {\n          colorCode: face.colorCode,\n          material: face.material,\n          vertices: face.vertices.map(function (v) {\n            return v.clone();\n          })\n        };\n      }); // none if this is subsequently modified\n\n      result.type = original.type;\n      result.category = original.category;\n      result.keywords = original.keywords;\n      result.subobjects = original.subobjects;\n      result.totalFaces = original.totalFaces;\n      result.startingConstructionStep = original.startingConstructionStep;\n      result.materials = original.materials;\n      result.group = null;\n      return result;\n    }\n  }, {\n    key: \"fetchData\",\n    value: function () {\n      var _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fileName) {\n        var triedLowerCase, locationState, subobjectURL, loader, fileLoader, text;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                triedLowerCase = false;\n                locationState = FILE_LOCATION_AS_IS;\n              case 2:\n                if (!(locationState !== FILE_LOCATION_NOT_FOUND)) {\n                  _context.next = 40;\n                  break;\n                }\n                subobjectURL = fileName;\n                _context.t0 = locationState;\n                _context.next = _context.t0 === FILE_LOCATION_AS_IS ? 7 : _context.t0 === FILE_LOCATION_TRY_PARTS ? 9 : _context.t0 === FILE_LOCATION_TRY_P ? 12 : _context.t0 === FILE_LOCATION_TRY_MODELS ? 15 : _context.t0 === FILE_LOCATION_TRY_RELATIVE ? 18 : _context.t0 === FILE_LOCATION_TRY_ABSOLUTE ? 21 : 23;\n                break;\n              case 7:\n                locationState = locationState + 1;\n                return _context.abrupt(\"break\", 23);\n              case 9:\n                subobjectURL = 'parts/' + subobjectURL;\n                locationState = locationState + 1;\n                return _context.abrupt(\"break\", 23);\n              case 12:\n                subobjectURL = 'p/' + subobjectURL;\n                locationState = locationState + 1;\n                return _context.abrupt(\"break\", 23);\n              case 15:\n                subobjectURL = 'models/' + subobjectURL;\n                locationState = locationState + 1;\n                return _context.abrupt(\"break\", 23);\n              case 18:\n                subobjectURL = fileName.substring(0, fileName.lastIndexOf('/') + 1) + subobjectURL;\n                locationState = locationState + 1;\n                return _context.abrupt(\"break\", 23);\n              case 21:\n                if (triedLowerCase) {\n                  // Try absolute path\n                  locationState = FILE_LOCATION_NOT_FOUND;\n                } else {\n                  // Next attempt is lower case\n                  fileName = fileName.toLowerCase();\n                  subobjectURL = fileName;\n                  triedLowerCase = true;\n                  locationState = FILE_LOCATION_AS_IS;\n                }\n                return _context.abrupt(\"break\", 23);\n              case 23:\n                loader = this.loader;\n                fileLoader = new FileLoader(loader.manager);\n                fileLoader.setPath(loader.partsLibraryPath);\n                fileLoader.setRequestHeader(loader.requestHeader);\n                fileLoader.setWithCredentials(loader.withCredentials);\n                _context.prev = 28;\n                _context.next = 31;\n                return fileLoader.loadAsync(subobjectURL);\n              case 31:\n                text = _context.sent;\n                return _context.abrupt(\"return\", text);\n              case 35:\n                _context.prev = 35;\n                _context.t1 = _context[\"catch\"](28);\n                return _context.abrupt(\"continue\", 2);\n              case 38:\n                _context.next = 2;\n                break;\n              case 40:\n                throw new Error('LDrawLoader: Subobject \"' + fileName + '\" could not be loaded.');\n              case 41:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[28, 35]]);\n      }));\n      function fetchData(_x) {\n        return _fetchData.apply(this, arguments);\n      }\n      return fetchData;\n    }()\n  }, {\n    key: \"parse\",\n    value: function parse(text) {\n      var fileName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var loader = this.loader; // final results\n\n      var faces = [];\n      var lineSegments = [];\n      var conditionalSegments = [];\n      var subobjects = [];\n      var materials = {};\n      var getLocalMaterial = function getLocalMaterial(colorCode) {\n        return materials[colorCode] || null;\n      };\n      var type = 'Model';\n      var category = null;\n      var keywords = null;\n      var totalFaces = 0; // split into lines\n\n      if (text.indexOf('\\r\\n') !== -1) {\n        // This is faster than String.split with regex that splits on both\n        text = text.replace(/\\r\\n/g, '\\n');\n      }\n      var lines = text.split('\\n');\n      var numLines = lines.length;\n      var parsingEmbeddedFiles = false;\n      var currentEmbeddedFileName = null;\n      var currentEmbeddedText = null;\n      var bfcCertified = false;\n      var bfcCCW = true;\n      var bfcInverted = false;\n      var bfcCull = true;\n      var startingConstructionStep = false; // Parse all line commands\n\n      for (var lineIndex = 0; lineIndex < numLines; lineIndex++) {\n        var line = lines[lineIndex];\n        if (line.length === 0) continue;\n        if (parsingEmbeddedFiles) {\n          if (line.startsWith('0 FILE ')) {\n            // Save previous embedded file in the cache\n            this.setData(currentEmbeddedFileName, currentEmbeddedText); // New embedded text file\n\n            currentEmbeddedFileName = line.substring(7);\n            currentEmbeddedText = '';\n          } else {\n            currentEmbeddedText += line + '\\n';\n          }\n          continue;\n        }\n        var lp = new LineParser(line, lineIndex + 1);\n        lp.seekNonSpace();\n        if (lp.isAtTheEnd()) {\n          // Empty line\n          continue;\n        } // Parse the line type\n\n        var lineType = lp.getToken();\n        var material = void 0;\n        var colorCode = void 0;\n        var segment = void 0;\n        var ccw = void 0;\n        var doubleSided = void 0;\n        var v0 = void 0,\n          v1 = void 0,\n          v2 = void 0,\n          v3 = void 0,\n          c0 = void 0,\n          c1 = void 0;\n        switch (lineType) {\n          // Line type 0: Comment or META\n          case '0':\n            // Parse meta directive\n            var meta = lp.getToken();\n            if (meta) {\n              switch (meta) {\n                case '!LDRAW_ORG':\n                  type = lp.getToken();\n                  break;\n                case '!COLOUR':\n                  material = loader.parseColorMetaDirective(lp);\n                  if (material) {\n                    materials[material.userData.code] = material;\n                  } else {\n                    console.warn('LDrawLoader: Error parsing material' + lp.getLineNumberString());\n                  }\n                  break;\n                case '!CATEGORY':\n                  category = lp.getToken();\n                  break;\n                case '!KEYWORDS':\n                  var newKeywords = lp.getRemainingString().split(',');\n                  if (newKeywords.length > 0) {\n                    if (!keywords) {\n                      keywords = [];\n                    }\n                    newKeywords.forEach(function (keyword) {\n                      keywords.push(keyword.trim());\n                    });\n                  }\n                  break;\n                case 'FILE':\n                  if (lineIndex > 0) {\n                    // Start embedded text files parsing\n                    parsingEmbeddedFiles = true;\n                    currentEmbeddedFileName = lp.getRemainingString();\n                    currentEmbeddedText = '';\n                    bfcCertified = false;\n                    bfcCCW = true;\n                  }\n                  break;\n                case 'BFC':\n                  // Changes to the backface culling state\n                  while (!lp.isAtTheEnd()) {\n                    var token = lp.getToken();\n                    switch (token) {\n                      case 'CERTIFY':\n                      case 'NOCERTIFY':\n                        bfcCertified = token === 'CERTIFY';\n                        bfcCCW = true;\n                        break;\n                      case 'CW':\n                      case 'CCW':\n                        bfcCCW = token === 'CCW';\n                        break;\n                      case 'INVERTNEXT':\n                        bfcInverted = true;\n                        break;\n                      case 'CLIP':\n                      case 'NOCLIP':\n                        bfcCull = token === 'CLIP';\n                        break;\n                      default:\n                        console.warn('THREE.LDrawLoader: BFC directive \"' + token + '\" is unknown.');\n                        break;\n                    }\n                  }\n                  break;\n                case 'STEP':\n                  startingConstructionStep = true;\n                  break;\n              }\n            }\n            break;\n          // Line type 1: Sub-object file\n\n          case '1':\n            colorCode = lp.getToken();\n            material = getLocalMaterial(colorCode);\n            var posX = parseFloat(lp.getToken());\n            var posY = parseFloat(lp.getToken());\n            var posZ = parseFloat(lp.getToken());\n            var m0 = parseFloat(lp.getToken());\n            var m1 = parseFloat(lp.getToken());\n            var m2 = parseFloat(lp.getToken());\n            var m3 = parseFloat(lp.getToken());\n            var m4 = parseFloat(lp.getToken());\n            var m5 = parseFloat(lp.getToken());\n            var m6 = parseFloat(lp.getToken());\n            var m7 = parseFloat(lp.getToken());\n            var m8 = parseFloat(lp.getToken());\n            var matrix = new Matrix4().set(m0, m1, m2, posX, m3, m4, m5, posY, m6, m7, m8, posZ, 0, 0, 0, 1);\n            var _fileName = lp.getRemainingString().trim().replace(/\\\\/g, '/');\n            if (loader.fileMap[_fileName]) {\n              // Found the subobject path in the preloaded file path map\n              _fileName = loader.fileMap[_fileName];\n            } else {\n              // Standardized subfolders\n              if (_fileName.startsWith('s/')) {\n                _fileName = 'parts/' + _fileName;\n              } else if (_fileName.startsWith('48/')) {\n                _fileName = 'p/' + _fileName;\n              }\n            }\n            subobjects.push({\n              material: material,\n              colorCode: colorCode,\n              matrix: matrix,\n              fileName: _fileName,\n              inverted: bfcInverted,\n              startingConstructionStep: startingConstructionStep\n            });\n            bfcInverted = false;\n            break;\n          // Line type 2: Line segment\n\n          case '2':\n            colorCode = lp.getToken();\n            material = getLocalMaterial(colorCode);\n            v0 = lp.getVector();\n            v1 = lp.getVector();\n            segment = {\n              material: material,\n              colorCode: colorCode,\n              vertices: [v0, v1]\n            };\n            lineSegments.push(segment);\n            break;\n          // Line type 5: Conditional Line segment\n\n          case '5':\n            colorCode = lp.getToken();\n            material = getLocalMaterial(colorCode);\n            v0 = lp.getVector();\n            v1 = lp.getVector();\n            c0 = lp.getVector();\n            c1 = lp.getVector();\n            segment = {\n              material: material,\n              colorCode: colorCode,\n              vertices: [v0, v1],\n              controlPoints: [c0, c1]\n            };\n            conditionalSegments.push(segment);\n            break;\n          // Line type 3: Triangle\n\n          case '3':\n            colorCode = lp.getToken();\n            material = getLocalMaterial(colorCode);\n            ccw = bfcCCW;\n            doubleSided = !bfcCertified || !bfcCull;\n            if (ccw === true) {\n              v0 = lp.getVector();\n              v1 = lp.getVector();\n              v2 = lp.getVector();\n            } else {\n              v2 = lp.getVector();\n              v1 = lp.getVector();\n              v0 = lp.getVector();\n            }\n            faces.push({\n              material: material,\n              colorCode: colorCode,\n              faceNormal: null,\n              vertices: [v0, v1, v2],\n              normals: [null, null, null]\n            });\n            totalFaces++;\n            if (doubleSided === true) {\n              faces.push({\n                material: material,\n                colorCode: colorCode,\n                faceNormal: null,\n                vertices: [v2, v1, v0],\n                normals: [null, null, null]\n              });\n              totalFaces++;\n            }\n            break;\n          // Line type 4: Quadrilateral\n\n          case '4':\n            colorCode = lp.getToken();\n            material = getLocalMaterial(colorCode);\n            ccw = bfcCCW;\n            doubleSided = !bfcCertified || !bfcCull;\n            if (ccw === true) {\n              v0 = lp.getVector();\n              v1 = lp.getVector();\n              v2 = lp.getVector();\n              v3 = lp.getVector();\n            } else {\n              v3 = lp.getVector();\n              v2 = lp.getVector();\n              v1 = lp.getVector();\n              v0 = lp.getVector();\n            } // specifically place the triangle diagonal in the v0 and v1 slots so we can\n            // account for the doubling of vertices later when smoothing normals.\n\n            faces.push({\n              material: material,\n              colorCode: colorCode,\n              faceNormal: null,\n              vertices: [v0, v1, v2, v3],\n              normals: [null, null, null, null]\n            });\n            totalFaces += 2;\n            if (doubleSided === true) {\n              faces.push({\n                material: material,\n                colorCode: colorCode,\n                faceNormal: null,\n                vertices: [v3, v2, v1, v0],\n                normals: [null, null, null, null]\n              });\n              totalFaces += 2;\n            }\n            break;\n          default:\n            throw new Error('LDrawLoader: Unknown line type \"' + lineType + '\"' + lp.getLineNumberString() + '.');\n        }\n      }\n      if (parsingEmbeddedFiles) {\n        this.setData(currentEmbeddedFileName, currentEmbeddedText);\n      }\n      return {\n        faces: faces,\n        conditionalSegments: conditionalSegments,\n        lineSegments: lineSegments,\n        type: type,\n        category: category,\n        keywords: keywords,\n        subobjects: subobjects,\n        totalFaces: totalFaces,\n        startingConstructionStep: startingConstructionStep,\n        materials: materials,\n        fileName: fileName,\n        group: null\n      };\n    } // returns an (optionally cloned) instance of the data\n  }, {\n    key: \"getData\",\n    value: function getData(fileName) {\n      var clone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var key = fileName.toLowerCase();\n      var result = this._cache[key];\n      if (result === null || result instanceof Promise) {\n        return null;\n      }\n      if (clone) {\n        return this.cloneResult(result);\n      } else {\n        return result;\n      }\n    } // kicks off a fetch and parse of the requested data if it hasn't already been loaded. Returns when\n    // the data is ready to use and can be retrieved synchronously with \"getData\".\n  }, {\n    key: \"ensureDataLoaded\",\n    value: function () {\n      var _ensureDataLoaded = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(fileName) {\n        var _this3 = this;\n        var key;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                key = fileName.toLowerCase();\n                if (!(key in this._cache)) {\n                  // replace the promise with a copy of the parsed data for immediate processing\n                  this._cache[key] = this.fetchData(fileName).then(function (text) {\n                    var info = _this3.parse(text, fileName);\n                    _this3._cache[key] = info;\n                    return info;\n                  });\n                }\n                _context2.next = 4;\n                return this._cache[key];\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function ensureDataLoaded(_x2) {\n        return _ensureDataLoaded.apply(this, arguments);\n      }\n      return ensureDataLoaded;\n    }() // sets the data in the cache from parsed data\n  }, {\n    key: \"setData\",\n    value: function setData(fileName, text) {\n      var key = fileName.toLowerCase();\n      this._cache[key] = this.parse(text, fileName);\n    }\n  }]);\n  return LDrawParsedCache;\n}(); // returns the material for an associated color code. If the color code is 16 for a face or 24 for\n// an edge then the passthroughColorCode is used.\nfunction getMaterialFromCode(colorCode, parentColorCode, materialHierarchy, forEdge) {\n  var isPassthrough = !forEdge && colorCode === MAIN_COLOUR_CODE || forEdge && colorCode === MAIN_EDGE_COLOUR_CODE;\n  if (isPassthrough) {\n    colorCode = parentColorCode;\n  }\n  return materialHierarchy[colorCode] || null;\n} // Class used to parse and build LDraw parts as three.js objects and cache them if they're a \"Part\" type.\nvar LDrawPartsGeometryCache = /*#__PURE__*/function () {\n  function LDrawPartsGeometryCache(loader) {\n    _classCallCheck(this, LDrawPartsGeometryCache);\n    this.loader = loader;\n    this.parseCache = new LDrawParsedCache(loader);\n    this._cache = {};\n  } // Convert the given file information into a mesh by processing subobjects.\n  _createClass(LDrawPartsGeometryCache, [{\n    key: \"processIntoMesh\",\n    value: function () {\n      var _processIntoMesh = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(info) {\n        var _this4 = this;\n        var loader, parseCache, faceMaterials, processInfoSubobjects, i, l, checkSubSegments, group;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                loader = this.loader;\n                parseCache = this.parseCache;\n                faceMaterials = new Set(); // Processes the part subobject information to load child parts and merge geometry onto part\n                // piece object.\n                processInfoSubobjects = /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(info) {\n                    var subobject,\n                      subobjects,\n                      promises,\n                      _loop,\n                      i,\n                      l,\n                      group,\n                      subobjectInfos,\n                      _i5,\n                      _l4,\n                      _subobject,\n                      subobjectInfo,\n                      subobjectGroup,\n                      parentLineSegments,\n                      parentConditionalSegments,\n                      parentFaces,\n                      lineSegments,\n                      conditionalSegments,\n                      faces,\n                      matrix,\n                      inverted,\n                      matrixScaleInverted,\n                      colorCode,\n                      lineColorCode,\n                      _i6,\n                      _l5,\n                      ls,\n                      vertices,\n                      _i7,\n                      _l6,\n                      os,\n                      _vertices3,\n                      controlPoints,\n                      _i8,\n                      _l7,\n                      tri,\n                      _vertices4,\n                      _i9,\n                      _l8,\n                      _args3 = arguments;\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            subobject = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : null;\n                            subobjects = info.subobjects;\n                            promises = []; // Trigger load of all subobjects. If a subobject isn't a primitive then load it as a separate\n                            // group which lets instruction steps apply correctly.\n                            _loop = function _loop(i, l) {\n                              var subobject = subobjects[i];\n                              var promise = parseCache.ensureDataLoaded(subobject.fileName).then(function () {\n                                var subobjectInfo = parseCache.getData(subobject.fileName, false);\n                                if (!isPrimitiveType(subobjectInfo.type)) {\n                                  return _this4.loadModel(subobject.fileName).catch(function (error) {\n                                    console.warn(error);\n                                    return null;\n                                  });\n                                }\n                                return processInfoSubobjects(parseCache.getData(subobject.fileName), subobject);\n                              });\n                              promises.push(promise);\n                            };\n                            for (i = 0, l = subobjects.length; i < l; i++) {\n                              _loop(i, l);\n                            }\n                            group = new Group();\n                            group.userData.category = info.category;\n                            group.userData.keywords = info.keywords;\n                            info.group = group;\n                            _context3.next = 11;\n                            return Promise.all(promises);\n                          case 11:\n                            subobjectInfos = _context3.sent;\n                            _i5 = 0, _l4 = subobjectInfos.length;\n                          case 13:\n                            if (!(_i5 < _l4)) {\n                              _context3.next = 45;\n                              break;\n                            }\n                            _subobject = info.subobjects[_i5];\n                            subobjectInfo = subobjectInfos[_i5];\n                            if (!(subobjectInfo === null)) {\n                              _context3.next = 18;\n                              break;\n                            }\n                            return _context3.abrupt(\"continue\", 42);\n                          case 18:\n                            if (!subobjectInfo.isGroup) {\n                              _context3.next = 26;\n                              break;\n                            }\n                            subobjectGroup = subobjectInfo;\n                            _subobject.matrix.decompose(subobjectGroup.position, subobjectGroup.quaternion, subobjectGroup.scale);\n                            subobjectGroup.userData.startingConstructionStep = _subobject.startingConstructionStep;\n                            subobjectGroup.name = _subobject.fileName;\n                            loader.applyMaterialsToMesh(subobjectGroup, _subobject.colorCode, info.materials);\n                            group.add(subobjectGroup);\n                            return _context3.abrupt(\"continue\", 42);\n                          case 26:\n                            // add the subobject group if it has children in case it has both children and primitives\n\n                            if (subobjectInfo.group.children.length) {\n                              group.add(subobjectInfo.group);\n                            } // transform the primitives into the local space of the parent piece and append them to\n                            // to the parent primitives list.\n                            parentLineSegments = info.lineSegments;\n                            parentConditionalSegments = info.conditionalSegments;\n                            parentFaces = info.faces;\n                            lineSegments = subobjectInfo.lineSegments;\n                            conditionalSegments = subobjectInfo.conditionalSegments;\n                            faces = subobjectInfo.faces;\n                            matrix = _subobject.matrix;\n                            inverted = _subobject.inverted;\n                            matrixScaleInverted = matrix.determinant() < 0;\n                            colorCode = _subobject.colorCode;\n                            lineColorCode = colorCode === MAIN_COLOUR_CODE ? MAIN_EDGE_COLOUR_CODE : colorCode;\n                            for (_i6 = 0, _l5 = lineSegments.length; _i6 < _l5; _i6++) {\n                              ls = lineSegments[_i6];\n                              vertices = ls.vertices;\n                              vertices[0].applyMatrix4(matrix);\n                              vertices[1].applyMatrix4(matrix);\n                              ls.colorCode = ls.colorCode === MAIN_EDGE_COLOUR_CODE ? lineColorCode : ls.colorCode;\n                              ls.material = ls.material || getMaterialFromCode(ls.colorCode, ls.colorCode, info.materials, true);\n                              parentLineSegments.push(ls);\n                            }\n                            for (_i7 = 0, _l6 = conditionalSegments.length; _i7 < _l6; _i7++) {\n                              os = conditionalSegments[_i7];\n                              _vertices3 = os.vertices;\n                              controlPoints = os.controlPoints;\n                              _vertices3[0].applyMatrix4(matrix);\n                              _vertices3[1].applyMatrix4(matrix);\n                              controlPoints[0].applyMatrix4(matrix);\n                              controlPoints[1].applyMatrix4(matrix);\n                              os.colorCode = os.colorCode === MAIN_EDGE_COLOUR_CODE ? lineColorCode : os.colorCode;\n                              os.material = os.material || getMaterialFromCode(os.colorCode, os.colorCode, info.materials, true);\n                              parentConditionalSegments.push(os);\n                            }\n                            for (_i8 = 0, _l7 = faces.length; _i8 < _l7; _i8++) {\n                              tri = faces[_i8];\n                              _vertices4 = tri.vertices;\n                              for (_i9 = 0, _l8 = _vertices4.length; _i9 < _l8; _i9++) {\n                                _vertices4[_i9].applyMatrix4(matrix);\n                              }\n                              tri.colorCode = tri.colorCode === MAIN_COLOUR_CODE ? colorCode : tri.colorCode;\n                              tri.material = tri.material || getMaterialFromCode(tri.colorCode, colorCode, info.materials, false);\n                              faceMaterials.add(tri.colorCode); // If the scale of the object is negated then the triangle winding order\n                              // needs to be flipped.\n\n                              if (matrixScaleInverted !== inverted) {\n                                _vertices4.reverse();\n                              }\n                              parentFaces.push(tri);\n                            }\n                            info.totalFaces += subobjectInfo.totalFaces;\n                          case 42:\n                            _i5++;\n                            _context3.next = 13;\n                            break;\n                          case 45:\n                            // Apply the parent subobjects pass through material code to this object. This is done several times due\n                            // to material scoping.\n\n                            if (subobject) {\n                              loader.applyMaterialsToMesh(group, subobject.colorCode, info.materials);\n                            }\n                            return _context3.abrupt(\"return\", info);\n                          case 47:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n                  return function processInfoSubobjects(_x4) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }(); // Track material use to see if we need to use the normal smooth slow path for hard edges.\n                for (i = 0, l = info.faces; i < l; i++) {\n                  faceMaterials.add(info.faces[i].colorCode);\n                }\n                _context4.next = 7;\n                return processInfoSubobjects(info);\n              case 7:\n                if (loader.smoothNormals) {\n                  checkSubSegments = faceMaterials.size > 1;\n                  generateFaceNormals(info.faces);\n                  smoothNormals(info.faces, info.lineSegments, checkSubSegments);\n                } // Add the primitive objects and metadata.\n                group = info.group;\n                if (info.faces.length > 0) {\n                  group.add(createObject(info.faces, 3, false, info.totalFaces));\n                }\n                if (info.lineSegments.length > 0) {\n                  group.add(createObject(info.lineSegments, 2));\n                }\n                if (info.conditionalSegments.length > 0) {\n                  group.add(createObject(info.conditionalSegments, 2, true));\n                }\n                return _context4.abrupt(\"return\", group);\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function processIntoMesh(_x3) {\n        return _processIntoMesh.apply(this, arguments);\n      }\n      return processIntoMesh;\n    }()\n  }, {\n    key: \"hasCachedModel\",\n    value: function hasCachedModel(fileName) {\n      return fileName !== null && fileName.toLowerCase() in this._cache;\n    }\n  }, {\n    key: \"getCachedModel\",\n    value: function () {\n      var _getCachedModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(fileName) {\n        var key, group;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(fileName !== null && this.hasCachedModel(fileName))) {\n                  _context5.next = 8;\n                  break;\n                }\n                key = fileName.toLowerCase();\n                _context5.next = 4;\n                return this._cache[key];\n              case 4:\n                group = _context5.sent;\n                return _context5.abrupt(\"return\", group.clone());\n              case 8:\n                return _context5.abrupt(\"return\", null);\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function getCachedModel(_x5) {\n        return _getCachedModel.apply(this, arguments);\n      }\n      return getCachedModel;\n    }() // Loads and parses the model with the given file name. Returns a cached copy if available.\n  }, {\n    key: \"loadModel\",\n    value: function () {\n      var _loadModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(fileName) {\n        var parseCache, key, info, promise, group;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                parseCache = this.parseCache;\n                key = fileName.toLowerCase();\n                if (!this.hasCachedModel(fileName)) {\n                  _context6.next = 6;\n                  break;\n                }\n                return _context6.abrupt(\"return\", this.getCachedModel(fileName));\n              case 6:\n                _context6.next = 8;\n                return parseCache.ensureDataLoaded(fileName);\n              case 8:\n                info = parseCache.getData(fileName);\n                promise = this.processIntoMesh(info); // Now that the file has loaded it's possible that another part parse has been waiting in parallel\n                // so check the cache again to see if it's been added since the last async operation so we don't\n                // do unnecessary work.\n                if (!this.hasCachedModel(fileName)) {\n                  _context6.next = 12;\n                  break;\n                }\n                return _context6.abrupt(\"return\", this.getCachedModel(fileName));\n              case 12:\n                // Cache object if it's a part so it can be reused later.\n\n                if (isPartType(info.type)) {\n                  this._cache[key] = promise;\n                } // return a copy\n                _context6.next = 15;\n                return promise;\n              case 15:\n                group = _context6.sent;\n                return _context6.abrupt(\"return\", group.clone());\n              case 17:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function loadModel(_x6) {\n        return _loadModel.apply(this, arguments);\n      }\n      return loadModel;\n    }() // parses the given model text into a renderable object. Returns cached copy if available.\n  }, {\n    key: \"parseModel\",\n    value: function () {\n      var _parseModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(text) {\n        var parseCache, info;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                parseCache = this.parseCache;\n                info = parseCache.parse(text);\n                if (!(isPartType(info.type) && this.hasCachedModel(info.fileName))) {\n                  _context7.next = 4;\n                  break;\n                }\n                return _context7.abrupt(\"return\", this.getCachedModel(info.fileName));\n              case 4:\n                return _context7.abrupt(\"return\", this.processIntoMesh(info));\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function parseModel(_x7) {\n        return _parseModel.apply(this, arguments);\n      }\n      return parseModel;\n    }()\n  }]);\n  return LDrawPartsGeometryCache;\n}();\nfunction sortByMaterial(a, b) {\n  if (a.colorCode === b.colorCode) {\n    return 0;\n  }\n  if (a.colorCode < b.colorCode) {\n    return -1;\n  }\n  return 1;\n}\nfunction createObject(elements, elementSize) {\n  var isConditionalSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var totalElements = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  // Creates a LineSegments (elementSize = 2) or a Mesh (elementSize = 3 )\n  // With per face / segment material, implemented with mesh groups and materials array\n  // Sort the faces or line segments by color code to make later the mesh groups\n  elements.sort(sortByMaterial);\n  if (totalElements === null) {\n    totalElements = elements.length;\n  }\n  var positions = new Float32Array(elementSize * totalElements * 3);\n  var normals = elementSize === 3 ? new Float32Array(elementSize * totalElements * 3) : null;\n  var materials = [];\n  var quadArray = new Array(6);\n  var bufferGeometry = new BufferGeometry();\n  var prevMaterial = null;\n  var index0 = 0;\n  var numGroupVerts = 0;\n  var offset = 0;\n  for (var iElem = 0, nElem = elements.length; iElem < nElem; iElem++) {\n    var elem = elements[iElem];\n    var vertices = elem.vertices;\n    if (vertices.length === 4) {\n      quadArray[0] = vertices[0];\n      quadArray[1] = vertices[1];\n      quadArray[2] = vertices[2];\n      quadArray[3] = vertices[0];\n      quadArray[4] = vertices[2];\n      quadArray[5] = vertices[3];\n      vertices = quadArray;\n    }\n    for (var j = 0, l = vertices.length; j < l; j++) {\n      var v = vertices[j];\n      var index = offset + j * 3;\n      positions[index + 0] = v.x;\n      positions[index + 1] = v.y;\n      positions[index + 2] = v.z;\n    } // create the normals array if this is a set of faces\n\n    if (elementSize === 3) {\n      if (!elem.faceNormal) {\n        var v0 = vertices[0];\n        var v1 = vertices[1];\n        var v2 = vertices[2];\n        _tempVec0.subVectors(v1, v0);\n        _tempVec1.subVectors(v2, v1);\n        elem.faceNormal = new Vector3().crossVectors(_tempVec0, _tempVec1).normalize();\n      }\n      var elemNormals = elem.normals;\n      if (elemNormals.length === 4) {\n        quadArray[0] = elemNormals[0];\n        quadArray[1] = elemNormals[1];\n        quadArray[2] = elemNormals[2];\n        quadArray[3] = elemNormals[0];\n        quadArray[4] = elemNormals[2];\n        quadArray[5] = elemNormals[3];\n        elemNormals = quadArray;\n      }\n      for (var _j = 0, _l9 = elemNormals.length; _j < _l9; _j++) {\n        // use face normal if a vertex normal is not provided\n        var n = elem.faceNormal;\n        if (elemNormals[_j]) {\n          n = elemNormals[_j].norm;\n        }\n        var _index2 = offset + _j * 3;\n        normals[_index2 + 0] = n.x;\n        normals[_index2 + 1] = n.y;\n        normals[_index2 + 2] = n.z;\n      }\n    }\n    if (prevMaterial !== elem.colorCode) {\n      if (prevMaterial !== null) {\n        bufferGeometry.addGroup(index0, numGroupVerts, materials.length - 1);\n      }\n      var material = elem.material;\n      if (material !== null) {\n        if (elementSize === 3) {\n          materials.push(material);\n        } else if (elementSize === 2) {\n          if (material !== null) {\n            if (isConditionalSegments) {\n              materials.push(material.userData.edgeMaterial.userData.conditionalEdgeMaterial);\n            } else {\n              materials.push(material.userData.edgeMaterial);\n            }\n          } else {\n            materials.push(null);\n          }\n        }\n      } else {\n        // If a material has not been made available yet then keep the color code string in the material array\n        // to save the spot for the material once a parent scopes materials are being applied to the object.\n        materials.push(elem.colorCode);\n      }\n      prevMaterial = elem.colorCode;\n      index0 = offset / 3;\n      numGroupVerts = vertices.length;\n    } else {\n      numGroupVerts += vertices.length;\n    }\n    offset += 3 * vertices.length;\n  }\n  if (numGroupVerts > 0) {\n    bufferGeometry.addGroup(index0, Infinity, materials.length - 1);\n  }\n  bufferGeometry.setAttribute('position', new BufferAttribute(positions, 3));\n  if (normals !== null) {\n    bufferGeometry.setAttribute('normal', new BufferAttribute(normals, 3));\n  }\n  var object3d = null;\n  if (elementSize === 2) {\n    if (isConditionalSegments) {\n      object3d = new ConditionalLineSegments(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n    } else {\n      object3d = new LineSegments(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n    }\n  } else if (elementSize === 3) {\n    object3d = new Mesh(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n  }\n  if (isConditionalSegments) {\n    object3d.isConditionalLine = true;\n    var controlArray0 = new Float32Array(elements.length * 3 * 2);\n    var controlArray1 = new Float32Array(elements.length * 3 * 2);\n    var directionArray = new Float32Array(elements.length * 3 * 2);\n    for (var i = 0, _l10 = elements.length; i < _l10; i++) {\n      var os = elements[i];\n      var _vertices5 = os.vertices;\n      var controlPoints = os.controlPoints;\n      var c0 = controlPoints[0];\n      var c1 = controlPoints[1];\n      var _v5 = _vertices5[0];\n      var _v6 = _vertices5[1];\n      var _index3 = i * 3 * 2;\n      controlArray0[_index3 + 0] = c0.x;\n      controlArray0[_index3 + 1] = c0.y;\n      controlArray0[_index3 + 2] = c0.z;\n      controlArray0[_index3 + 3] = c0.x;\n      controlArray0[_index3 + 4] = c0.y;\n      controlArray0[_index3 + 5] = c0.z;\n      controlArray1[_index3 + 0] = c1.x;\n      controlArray1[_index3 + 1] = c1.y;\n      controlArray1[_index3 + 2] = c1.z;\n      controlArray1[_index3 + 3] = c1.x;\n      controlArray1[_index3 + 4] = c1.y;\n      controlArray1[_index3 + 5] = c1.z;\n      directionArray[_index3 + 0] = _v6.x - _v5.x;\n      directionArray[_index3 + 1] = _v6.y - _v5.y;\n      directionArray[_index3 + 2] = _v6.z - _v5.z;\n      directionArray[_index3 + 3] = _v6.x - _v5.x;\n      directionArray[_index3 + 4] = _v6.y - _v5.y;\n      directionArray[_index3 + 5] = _v6.z - _v5.z;\n    }\n    bufferGeometry.setAttribute('control0', new BufferAttribute(controlArray0, 3, false));\n    bufferGeometry.setAttribute('control1', new BufferAttribute(controlArray1, 3, false));\n    bufferGeometry.setAttribute('direction', new BufferAttribute(directionArray, 3, false));\n  }\n  return object3d;\n} //\nvar LDrawLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(LDrawLoader, _Loader);\n  var _super3 = _createSuper(LDrawLoader);\n  function LDrawLoader(manager) {\n    var _this5;\n    _classCallCheck(this, LDrawLoader);\n    _this5 = _super3.call(this, manager); // Array of THREE.Material\n\n    _this5.materials = [];\n    _this5.materialLibrary = {}; // This also allows to handle the embedded text files (\"0 FILE\" lines)\n\n    _this5.partsCache = new LDrawPartsGeometryCache(_assertThisInitialized(_this5)); // This object is a map from file names to paths. It agilizes the paths search. If it is not set then files will be searched by trial and error.\n\n    _this5.fileMap = {}; // Initializes the materials library with default materials\n\n    _this5.setMaterials([]); // If this flag is set to true the vertex normals will be smoothed.\n\n    _this5.smoothNormals = true; // The path to load parts from the LDraw parts library from.\n\n    _this5.partsLibraryPath = '';\n    return _this5;\n  }\n  _createClass(LDrawLoader, [{\n    key: \"setPartsLibraryPath\",\n    value: function setPartsLibraryPath(path) {\n      this.partsLibraryPath = path;\n      return this;\n    }\n  }, {\n    key: \"preloadMaterials\",\n    value: function () {\n      var _preloadMaterials = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(url) {\n        var fileLoader, text, colorLineRegex, lines, materials, i, l, line, directive, material;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                fileLoader = new FileLoader(this.manager);\n                fileLoader.setPath(this.path);\n                fileLoader.setRequestHeader(this.requestHeader);\n                fileLoader.setWithCredentials(this.withCredentials);\n                _context8.next = 6;\n                return fileLoader.loadAsync(url);\n              case 6:\n                text = _context8.sent;\n                colorLineRegex = /^0 !COLOUR/;\n                lines = text.split(/[\\n\\r]/g);\n                materials = [];\n                for (i = 0, l = lines.length; i < l; i++) {\n                  line = lines[i];\n                  if (colorLineRegex.test(line)) {\n                    directive = line.replace(colorLineRegex, '');\n                    material = this.parseColorMetaDirective(new LineParser(directive));\n                    materials.push(material);\n                  }\n                }\n                this.setMaterials(materials);\n              case 12:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function preloadMaterials(_x8) {\n        return _preloadMaterials.apply(this, arguments);\n      }\n      return preloadMaterials;\n    }()\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this6 = this;\n      var fileLoader = new FileLoader(this.manager);\n      fileLoader.setPath(this.path);\n      fileLoader.setRequestHeader(this.requestHeader);\n      fileLoader.setWithCredentials(this.withCredentials);\n      fileLoader.load(url, function (text) {\n        _this6.partsCache.parseModel(text, _this6.materialLibrary).then(function (group) {\n          _this6.applyMaterialsToMesh(group, MAIN_COLOUR_CODE, _this6.materialLibrary, true);\n          _this6.computeConstructionSteps(group);\n          onLoad(group);\n        }).catch(onError);\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(text, onLoad) {\n      var _this7 = this;\n      this.partsCache.parseModel(text, this.materialLibrary).then(function (group) {\n        _this7.computeConstructionSteps(group);\n        onLoad(group);\n      });\n    }\n  }, {\n    key: \"setMaterials\",\n    value: function setMaterials(materials) {\n      this.materialLibrary = {};\n      this.materials = [];\n      for (var i = 0, l = materials.length; i < l; i++) {\n        this.addMaterial(materials[i]);\n      } // Add default main triangle and line edge materials (used in pieces that can be colored with a main color)\n\n      this.addMaterial(this.parseColorMetaDirective(new LineParser('Main_Colour CODE 16 VALUE #FF8080 EDGE #333333')));\n      this.addMaterial(this.parseColorMetaDirective(new LineParser('Edge_Colour CODE 24 VALUE #A0A0A0 EDGE #333333')));\n      return this;\n    }\n  }, {\n    key: \"setFileMap\",\n    value: function setFileMap(fileMap) {\n      this.fileMap = fileMap;\n      return this;\n    }\n  }, {\n    key: \"addMaterial\",\n    value: function addMaterial(material) {\n      // Adds a material to the material library which is on top of the parse scopes stack. And also to the materials array\n      var matLib = this.materialLibrary;\n      if (!matLib[material.userData.code]) {\n        this.materials.push(material);\n        matLib[material.userData.code] = material;\n      }\n      return this;\n    }\n  }, {\n    key: \"getMaterial\",\n    value: function getMaterial(colorCode) {\n      if (colorCode.startsWith('0x2')) {\n        // Special 'direct' material value (RGB color)\n        var color = colorCode.substring(3);\n        return this.parseColorMetaDirective(new LineParser('Direct_Color_' + color + ' CODE -1 VALUE #' + color + ' EDGE #' + color + ''));\n      }\n      return this.materialLibrary[colorCode] || null;\n    } // Applies the appropriate materials to a prebuilt hierarchy of geometry. Assumes that color codes are present\n    // in the material array if they need to be filled in.\n  }, {\n    key: \"applyMaterialsToMesh\",\n    value: function applyMaterialsToMesh(group, parentColorCode, materialHierarchy) {\n      var finalMaterialPass = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      // find any missing materials as indicated by a color code string and replace it with a material from the current material lib\n      var loader = this;\n      var parentIsPassthrough = parentColorCode === MAIN_COLOUR_CODE;\n      group.traverse(function (c) {\n        if (c.isMesh || c.isLineSegments) {\n          if (Array.isArray(c.material)) {\n            for (var i = 0, l = c.material.length; i < l; i++) {\n              if (!c.material[i].isMaterial) {\n                c.material[i] = getMaterial(c, c.material[i]);\n              }\n            }\n          } else if (!c.material.isMaterial) {\n            c.material = getMaterial(c, c.material);\n          }\n        }\n      }); // Returns the appropriate material for the object (line or face) given color code. If the code is \"pass through\"\n      // (24 for lines, 16 for edges) then the pass through color code is used. If that is also pass through then it's\n      // simply returned for the subsequent material application.\n\n      function getMaterial(c, colorCode) {\n        // if our parent is a passthrough color code and we don't have the current material color available then\n        // return early.\n        if (parentIsPassthrough && !(colorCode in materialHierarchy) && !finalMaterialPass) {\n          return colorCode;\n        }\n        var forEdge = c.isLineSegments || c.isConditionalLine;\n        var isPassthrough = !forEdge && colorCode === MAIN_COLOUR_CODE || forEdge && colorCode === MAIN_EDGE_COLOUR_CODE;\n        if (isPassthrough) {\n          colorCode = parentColorCode;\n        }\n        var material = null;\n        if (colorCode in materialHierarchy) {\n          material = materialHierarchy[colorCode];\n        } else if (finalMaterialPass) {\n          // see if we can get the final material from from the \"getMaterial\" function which will attempt to\n          // parse the \"direct\" colors\n          material = loader.getMaterial(colorCode);\n          if (material === null) {\n            // otherwise throw an error if this is final opportunity to set the material\n            throw new Error(\"LDrawLoader: Material properties for code \".concat(colorCode, \" not available.\"));\n          }\n        } else {\n          return colorCode;\n        }\n        if (c.isLineSegments) {\n          material = material.userData.edgeMaterial;\n          if (c.isConditionalLine) {\n            material = material.userData.conditionalEdgeMaterial;\n          }\n        }\n        return material;\n      }\n    }\n  }, {\n    key: \"getMainMaterial\",\n    value: function getMainMaterial() {\n      return this.getMaterial(MAIN_COLOUR_CODE);\n    }\n  }, {\n    key: \"getMainEdgeMaterial\",\n    value: function getMainEdgeMaterial() {\n      return this.getMaterial(MAIN_EDGE_COLOUR_CODE);\n    }\n  }, {\n    key: \"parseColorMetaDirective\",\n    value: function parseColorMetaDirective(lineParser) {\n      // Parses a color definition and returns a THREE.Material\n      var code = null; // Triangle and line colors\n\n      var color = 0xff00ff;\n      var edgeColor = 0xff00ff; // Transparency\n\n      var alpha = 1;\n      var isTransparent = false; // Self-illumination:\n\n      var luminance = 0;\n      var finishType = FINISH_TYPE_DEFAULT;\n      var edgeMaterial = null;\n      var name = lineParser.getToken();\n      if (!name) {\n        throw new Error('LDrawLoader: Material name was expected after \"!COLOUR tag' + lineParser.getLineNumberString() + '.');\n      } // Parse tag tokens and their parameters\n\n      var token = null;\n      while (true) {\n        token = lineParser.getToken();\n        if (!token) {\n          break;\n        }\n        switch (token.toUpperCase()) {\n          case 'CODE':\n            code = lineParser.getToken();\n            break;\n          case 'VALUE':\n            color = lineParser.getToken();\n            if (color.startsWith('0x')) {\n              color = '#' + color.substring(2);\n            } else if (!color.startsWith('#')) {\n              throw new Error('LDrawLoader: Invalid color while parsing material' + lineParser.getLineNumberString() + '.');\n            }\n            break;\n          case 'EDGE':\n            edgeColor = lineParser.getToken();\n            if (edgeColor.startsWith('0x')) {\n              edgeColor = '#' + edgeColor.substring(2);\n            } else if (!edgeColor.startsWith('#')) {\n              // Try to see if edge color is a color code\n              edgeMaterial = this.getMaterial(edgeColor);\n              if (!edgeMaterial) {\n                throw new Error('LDrawLoader: Invalid edge color while parsing material' + lineParser.getLineNumberString() + '.');\n              } // Get the edge material for this triangle material\n\n              edgeMaterial = edgeMaterial.userData.edgeMaterial;\n            }\n            break;\n          case 'ALPHA':\n            alpha = parseInt(lineParser.getToken());\n            if (isNaN(alpha)) {\n              throw new Error('LDrawLoader: Invalid alpha value in material definition' + lineParser.getLineNumberString() + '.');\n            }\n            alpha = Math.max(0, Math.min(1, alpha / 255));\n            if (alpha < 1) {\n              isTransparent = true;\n            }\n            break;\n          case 'LUMINANCE':\n            luminance = parseInt(lineParser.getToken());\n            if (isNaN(luminance)) {\n              throw new Error('LDrawLoader: Invalid luminance value in material definition' + LineParser.getLineNumberString() + '.');\n            }\n            luminance = Math.max(0, Math.min(1, luminance / 255));\n            break;\n          case 'CHROME':\n            finishType = FINISH_TYPE_CHROME;\n            break;\n          case 'PEARLESCENT':\n            finishType = FINISH_TYPE_PEARLESCENT;\n            break;\n          case 'RUBBER':\n            finishType = FINISH_TYPE_RUBBER;\n            break;\n          case 'MATTE_METALLIC':\n            finishType = FINISH_TYPE_MATTE_METALLIC;\n            break;\n          case 'METAL':\n            finishType = FINISH_TYPE_METAL;\n            break;\n          case 'MATERIAL':\n            // Not implemented\n            lineParser.setToEnd();\n            break;\n          default:\n            throw new Error('LDrawLoader: Unknown token \"' + token + '\" while parsing material' + lineParser.getLineNumberString() + '.');\n        }\n      }\n      var material = null;\n      switch (finishType) {\n        case FINISH_TYPE_DEFAULT:\n          material = new MeshStandardMaterial({\n            color: color,\n            roughness: 0.3,\n            metalness: 0\n          });\n          break;\n        case FINISH_TYPE_PEARLESCENT:\n          // Try to imitate pearlescency by making the surface glossy\n          material = new MeshStandardMaterial({\n            color: color,\n            roughness: 0.3,\n            metalness: 0.25\n          });\n          break;\n        case FINISH_TYPE_CHROME:\n          // Mirror finish surface\n          material = new MeshStandardMaterial({\n            color: color,\n            roughness: 0,\n            metalness: 1\n          });\n          break;\n        case FINISH_TYPE_RUBBER:\n          // Rubber finish\n          material = new MeshStandardMaterial({\n            color: color,\n            roughness: 0.9,\n            metalness: 0\n          });\n          break;\n        case FINISH_TYPE_MATTE_METALLIC:\n          // Brushed metal finish\n          material = new MeshStandardMaterial({\n            color: color,\n            roughness: 0.8,\n            metalness: 0.4\n          });\n          break;\n        case FINISH_TYPE_METAL:\n          // Average metal finish\n          material = new MeshStandardMaterial({\n            color: color,\n            roughness: 0.2,\n            metalness: 0.85\n          });\n          break;\n      }\n      material.transparent = isTransparent;\n      material.premultipliedAlpha = true;\n      material.opacity = alpha;\n      material.depthWrite = !isTransparent;\n      material.polygonOffset = true;\n      material.polygonOffsetFactor = 1;\n      if (luminance !== 0) {\n        material.emissive.set(material.color).multiplyScalar(luminance);\n      }\n      if (!edgeMaterial) {\n        // This is the material used for edges\n        edgeMaterial = new LineBasicMaterial({\n          color: edgeColor,\n          transparent: isTransparent,\n          opacity: alpha,\n          depthWrite: !isTransparent\n        });\n        edgeMaterial.userData.code = code;\n        edgeMaterial.name = name + ' - Edge'; // This is the material used for conditional edges\n\n        edgeMaterial.userData.conditionalEdgeMaterial = new LDrawConditionalLineMaterial({\n          fog: true,\n          transparent: isTransparent,\n          depthWrite: !isTransparent,\n          color: edgeColor,\n          opacity: alpha\n        });\n      }\n      material.userData.code = code;\n      material.name = name;\n      material.userData.edgeMaterial = edgeMaterial;\n      this.addMaterial(material);\n      return material;\n    }\n  }, {\n    key: \"computeConstructionSteps\",\n    value: function computeConstructionSteps(model) {\n      // Sets userdata.constructionStep number in Group objects and userData.numConstructionSteps number in the root Group object.\n      var stepNumber = 0;\n      model.traverse(function (c) {\n        if (c.isGroup) {\n          if (c.userData.startingConstructionStep) {\n            stepNumber++;\n          }\n          c.userData.constructionStep = stepNumber;\n        }\n      });\n      model.userData.numConstructionSteps = stepNumber + 1;\n    }\n  }]);\n  return LDrawLoader;\n}(Loader);\nexport { LDrawLoader };","map":{"version":3,"names":["Vector3","Ray","Loader","FileLoader","MeshStandardMaterial","LineBasicMaterial","ShaderMaterial","UniformsUtils","UniformsLib","Color","BufferGeometry","BufferAttribute","LineSegments","Mesh","Matrix4","Group","FINISH_TYPE_DEFAULT","FINISH_TYPE_CHROME","FINISH_TYPE_PEARLESCENT","FINISH_TYPE_RUBBER","FINISH_TYPE_MATTE_METALLIC","FINISH_TYPE_METAL","FILE_LOCATION_AS_IS","FILE_LOCATION_TRY_PARTS","FILE_LOCATION_TRY_P","FILE_LOCATION_TRY_MODELS","FILE_LOCATION_TRY_RELATIVE","FILE_LOCATION_TRY_ABSOLUTE","FILE_LOCATION_NOT_FOUND","MAIN_COLOUR_CODE","MAIN_EDGE_COLOUR_CODE","_tempVec0","_tempVec1","LDrawConditionalLineMaterial","_ShaderMaterial","_inherits","_super","_createSuper","parameters","_this","_classCallCheck","call","uniforms","merge","fog","diffuse","value","opacity","vertexShader","fragmentShader","Object","defineProperties","_assertThisInitialized","get","set","color","setValues","isLDrawConditionalLineMaterial","ConditionalLineSegments","_LineSegments","_super2","geometry","material","_this2","isConditionalLine","generateFaceNormals","faces","i","l","length","face","vertices","v0","v1","v2","subVectors","faceNormal","crossVectors","normalize","_ray","smoothNormals","lineSegments","checkSubSegments","arguments","undefined","hashMultiplier","hashVertex","v","x","y","z","concat","hashEdge","toNormalizedRay","targetRay","direction","scalar","dot","origin","copy","addScaledVector","hashRay","ray","hardEdges","Set","hardEdgeRays","Map","halfEdgeList","normals","ls","add","rh1","has","rh2","info","distances","d0","d1","_ref","push","tri","vertCount","i2","index","next","hash","rayHash","_ref2","found","halfEdge","key","queue","pop","vertNormals","reverseHash","otherInfo","otherTri","otherIndex","otherNormals","otherVertCount","otherFaceNormal","Math","abs","otherNext","norm","sharedNormal1","sharedNormal2","isPartType","type","isPrimitiveType","test","LineParser","line","lineNumber","lineLength","currentCharIndex","currentChar","_createClass","seekNonSpace","charAt","getToken","pos0","pos1","substring","getVector","parseFloat","getRemainingString","isAtTheEnd","setToEnd","getLineNumberString","LDrawParsedCache","loader","_cache","cloneResult","original","result","map","colorCode","clone","conditionalSegments","controlPoints","category","keywords","subobjects","totalFaces","startingConstructionStep","materials","group","_fetchData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","fileName","triedLowerCase","locationState","subobjectURL","fileLoader","text","wrap","_callee$","_context","prev","t0","abrupt","lastIndexOf","toLowerCase","manager","setPath","partsLibraryPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","loadAsync","sent","t1","Error","stop","fetchData","_x","apply","parse","getLocalMaterial","indexOf","replace","lines","split","numLines","parsingEmbeddedFiles","currentEmbeddedFileName","currentEmbeddedText","bfcCertified","bfcCCW","bfcInverted","bfcCull","lineIndex","startsWith","setData","lp","lineType","segment","ccw","doubleSided","v3","c0","c1","meta","parseColorMetaDirective","userData","code","console","warn","newKeywords","forEach","keyword","trim","token","posX","posY","posZ","m0","m1","m2","m3","m4","m5","m6","m7","m8","matrix","fileMap","inverted","getData","Promise","_ensureDataLoaded","_callee2","_this3","_callee2$","_context2","then","ensureDataLoaded","_x2","getMaterialFromCode","parentColorCode","materialHierarchy","forEdge","isPassthrough","LDrawPartsGeometryCache","parseCache","_processIntoMesh","_callee4","_this4","faceMaterials","processInfoSubobjects","_callee4$","_context4","_ref3","_callee3","subobject","promises","_loop","subobjectInfos","_i5","_l4","_subobject","subobjectInfo","subobjectGroup","parentLineSegments","parentConditionalSegments","parentFaces","matrixScaleInverted","lineColorCode","_i6","_l5","_i7","_l6","os","_vertices3","_i8","_l7","_vertices4","_i9","_l8","_args3","_callee3$","_context3","promise","loadModel","catch","error","all","isGroup","decompose","position","quaternion","scale","name","applyMaterialsToMesh","children","determinant","applyMatrix4","reverse","_x4","size","createObject","processIntoMesh","_x3","hasCachedModel","_getCachedModel","_callee5","_callee5$","_context5","getCachedModel","_x5","_loadModel","_callee6","_callee6$","_context6","_x6","_parseModel","_callee7","_callee7$","_context7","parseModel","_x7","sortByMaterial","a","b","elements","elementSize","isConditionalSegments","totalElements","sort","positions","Float32Array","quadArray","Array","bufferGeometry","prevMaterial","index0","numGroupVerts","offset","iElem","nElem","elem","j","elemNormals","n","addGroup","edgeMaterial","conditionalEdgeMaterial","Infinity","setAttribute","object3d","controlArray0","controlArray1","directionArray","LDrawLoader","_Loader","_super3","_this5","materialLibrary","partsCache","setMaterials","setPartsLibraryPath","path","_preloadMaterials","_callee8","url","colorLineRegex","directive","_callee8$","_context8","preloadMaterials","_x8","load","onLoad","onProgress","onError","_this6","computeConstructionSteps","_this7","addMaterial","setFileMap","matLib","getMaterial","finalMaterialPass","parentIsPassthrough","traverse","c","isMesh","isLineSegments","isArray","isMaterial","getMainMaterial","getMainEdgeMaterial","lineParser","edgeColor","alpha","isTransparent","luminance","finishType","toUpperCase","parseInt","isNaN","max","min","roughness","metalness","transparent","premultipliedAlpha","depthWrite","polygonOffset","polygonOffsetFactor","emissive","multiplyScalar","model","stepNumber","constructionStep","numConstructionSteps"],"sources":["/home/danny/Documents/Programming/Solar/node_modules/three-stdlib/loaders/LDrawLoader.js"],"sourcesContent":["import { Vector3, Ray, Loader, FileLoader, MeshStandardMaterial, LineBasicMaterial, ShaderMaterial, UniformsUtils, UniformsLib, Color, BufferGeometry, BufferAttribute, LineSegments, Mesh, Matrix4, Group } from 'three';\n\n// Note: \"MATERIAL\" tag (e.g. GLITTER, SPECKLE) is not implemented\n\nconst FINISH_TYPE_DEFAULT = 0;\nconst FINISH_TYPE_CHROME = 1;\nconst FINISH_TYPE_PEARLESCENT = 2;\nconst FINISH_TYPE_RUBBER = 3;\nconst FINISH_TYPE_MATTE_METALLIC = 4;\nconst FINISH_TYPE_METAL = 5; // State machine to search a subobject path.\n// The LDraw standard establishes these various possible subfolders.\n\nconst FILE_LOCATION_AS_IS = 0;\nconst FILE_LOCATION_TRY_PARTS = 1;\nconst FILE_LOCATION_TRY_P = 2;\nconst FILE_LOCATION_TRY_MODELS = 3;\nconst FILE_LOCATION_TRY_RELATIVE = 4;\nconst FILE_LOCATION_TRY_ABSOLUTE = 5;\nconst FILE_LOCATION_NOT_FOUND = 6;\nconst MAIN_COLOUR_CODE = '16';\nconst MAIN_EDGE_COLOUR_CODE = '24';\n\nconst _tempVec0 = new Vector3();\n\nconst _tempVec1 = new Vector3();\n\nclass LDrawConditionalLineMaterial extends ShaderMaterial {\n  constructor(parameters) {\n    super({\n      uniforms: UniformsUtils.merge([UniformsLib.fog, {\n        diffuse: {\n          value: new Color()\n        },\n        opacity: {\n          value: 1.0\n        }\n      }]),\n      vertexShader:\n      /* glsl */\n      `\n        attribute vec3 control0;\n        attribute vec3 control1;\n        attribute vec3 direction;\n        varying float discardFlag;\n\n        #include <common>\n        #include <color_pars_vertex>\n        #include <fog_pars_vertex>\n        #include <logdepthbuf_pars_vertex>\n        #include <clipping_planes_pars_vertex>\n\n        void main() {\n          #include <color_vertex>\n\n          vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n          gl_Position = projectionMatrix * mvPosition;\n\n          // Transform the line segment ends and control points into camera clip space\n          vec4 c0 = projectionMatrix * modelViewMatrix * vec4(control0, 1.0);\n          vec4 c1 = projectionMatrix * modelViewMatrix * vec4(control1, 1.0);\n          vec4 p0 = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n          vec4 p1 = projectionMatrix * modelViewMatrix * vec4(position + direction, 1.0);\n\n          c0.xy /= c0.w;\n          c1.xy /= c1.w;\n          p0.xy /= p0.w;\n          p1.xy /= p1.w;\n\n          // Get the direction of the segment and an orthogonal vector\n          vec2 dir = p1.xy - p0.xy;\n          vec2 norm = vec2(-dir.y, dir.x);\n\n          // Get control point directions from the line\n          vec2 c0dir = c0.xy - p1.xy;\n          vec2 c1dir = c1.xy - p1.xy;\n\n          // If the vectors to the controls points are pointed in different directions away\n          // from the line segment then the line should not be drawn.\n          float d0 = dot(normalize(norm), normalize(c0dir));\n          float d1 = dot(normalize(norm), normalize(c1dir));\n          discardFlag = float(sign(d0) != sign(d1));\n\n          #include <logdepthbuf_vertex>\n          #include <clipping_planes_vertex>\n          #include <fog_vertex>\n        }\n      `,\n      fragmentShader:\n      /* glsl */\n      `\n        uniform vec3 diffuse;\n        uniform float opacity;\n        varying float discardFlag;\n\n        #include <common>\n        #include <color_pars_fragment>\n        #include <fog_pars_fragment>\n        #include <logdepthbuf_pars_fragment>\n        #include <clipping_planes_pars_fragment>\n\n        void main() {\n          if (discardFlag > 0.5) discard;\n\n          #include <clipping_planes_fragment>\n          vec3 outgoingLight = vec3(0.0);\n          vec4 diffuseColor = vec4(diffuse, opacity);\n          #include <logdepthbuf_fragment>\n          #include <color_fragment>\n          outgoingLight = diffuseColor.rgb; // simple shader\n          gl_FragColor = vec4(outgoingLight, diffuseColor.a);\n          #include <tonemapping_fragment>\n          #include <encodings_fragment>\n          #include <fog_fragment>\n          #include <premultiplied_alpha_fragment>\n        }\n      `\n    });\n    Object.defineProperties(this, {\n      opacity: {\n        get: function () {\n          return this.uniforms.opacity.value;\n        },\n        set: function (value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      color: {\n        get: function () {\n          return this.uniforms.diffuse.value;\n        }\n      }\n    });\n    this.setValues(parameters);\n    this.isLDrawConditionalLineMaterial = true;\n  }\n\n}\n\nclass ConditionalLineSegments extends LineSegments {\n  constructor(geometry, material) {\n    super(geometry, material);\n    this.isConditionalLine = true;\n  }\n\n}\n\nfunction generateFaceNormals(faces) {\n  for (let i = 0, l = faces.length; i < l; i++) {\n    const face = faces[i];\n    const vertices = face.vertices;\n    const v0 = vertices[0];\n    const v1 = vertices[1];\n    const v2 = vertices[2];\n\n    _tempVec0.subVectors(v1, v0);\n\n    _tempVec1.subVectors(v2, v1);\n\n    face.faceNormal = new Vector3().crossVectors(_tempVec0, _tempVec1).normalize();\n  }\n}\n\nconst _ray = new Ray();\n\nfunction smoothNormals(faces, lineSegments, checkSubSegments = false) {\n  // NOTE: 1e2 is pretty coarse but was chosen to quantize the resulting value because\n  // it allows edges to be smoothed as expected (see minifig arms).\n  // --\n  // And the vector values are initialize multiplied by 1 + 1e-10 to account for floating\n  // point errors on vertices along quantization boundaries. Ie after matrix multiplication\n  // vertices that should be merged might be set to \"1.7\" and \"1.6999...\" meaning they won't\n  // get merged. This added epsilon attempts to push these error values to the same quantized\n  // value for the sake of hashing. See \"AT-ST mini\" dishes. See mrdoob/three#23169.\n  const hashMultiplier = (1 + 1e-10) * 1e2;\n\n  function hashVertex(v) {\n    const x = ~~(v.x * hashMultiplier);\n    const y = ~~(v.y * hashMultiplier);\n    const z = ~~(v.z * hashMultiplier);\n    return `${x},${y},${z}`;\n  }\n\n  function hashEdge(v0, v1) {\n    return `${hashVertex(v0)}_${hashVertex(v1)}`;\n  } // converts the two vertices to a ray with a normalized direction and origin of 0, 0, 0 projected\n  // onto the original line.\n\n\n  function toNormalizedRay(v0, v1, targetRay) {\n    targetRay.direction.subVectors(v1, v0).normalize();\n    const scalar = v0.dot(targetRay.direction);\n    targetRay.origin.copy(v0).addScaledVector(targetRay.direction, -scalar);\n    return targetRay;\n  }\n\n  function hashRay(ray) {\n    return hashEdge(ray.origin, ray.direction);\n  }\n\n  const hardEdges = new Set();\n  const hardEdgeRays = new Map();\n  const halfEdgeList = {};\n  const normals = []; // Save the list of hard edges by hash\n\n  for (let i = 0, l = lineSegments.length; i < l; i++) {\n    const ls = lineSegments[i];\n    const vertices = ls.vertices;\n    const v0 = vertices[0];\n    const v1 = vertices[1];\n    hardEdges.add(hashEdge(v0, v1));\n    hardEdges.add(hashEdge(v1, v0)); // only generate the hard edge ray map if we're checking subsegments because it's more expensive to check\n    // and requires more memory.\n\n    if (checkSubSegments) {\n      // add both ray directions to the map\n      const ray = toNormalizedRay(v0, v1, new Ray());\n      const rh1 = hashRay(ray);\n\n      if (!hardEdgeRays.has(rh1)) {\n        toNormalizedRay(v1, v0, ray);\n        const rh2 = hashRay(ray);\n        const info = {\n          ray,\n          distances: []\n        };\n        hardEdgeRays.set(rh1, info);\n        hardEdgeRays.set(rh2, info);\n      } // store both segments ends in min, max order in the distances array to check if a face edge is a\n      // subsegment later.\n\n\n      const info = hardEdgeRays.get(rh1);\n      let d0 = info.ray.direction.dot(v0);\n      let d1 = info.ray.direction.dot(v1);\n\n      if (d0 > d1) {\n        [d0, d1] = [d1, d0];\n      }\n\n      info.distances.push(d0, d1);\n    }\n  } // track the half edges associated with each triangle\n\n\n  for (let i = 0, l = faces.length; i < l; i++) {\n    const tri = faces[i];\n    const vertices = tri.vertices;\n    const vertCount = vertices.length;\n\n    for (let i2 = 0; i2 < vertCount; i2++) {\n      const index = i2;\n      const next = (i2 + 1) % vertCount;\n      const v0 = vertices[index];\n      const v1 = vertices[next];\n      const hash = hashEdge(v0, v1); // don't add the triangle if the edge is supposed to be hard\n\n      if (hardEdges.has(hash)) {\n        continue;\n      } // if checking subsegments then check to see if this edge lies on a hard edge ray and whether its within any ray bounds\n\n\n      if (checkSubSegments) {\n        toNormalizedRay(v0, v1, _ray);\n        const rayHash = hashRay(_ray);\n\n        if (hardEdgeRays.has(rayHash)) {\n          const info = hardEdgeRays.get(rayHash);\n          const {\n            ray,\n            distances\n          } = info;\n          let d0 = ray.direction.dot(v0);\n          let d1 = ray.direction.dot(v1);\n\n          if (d0 > d1) {\n            [d0, d1] = [d1, d0];\n          } // return early if the face edge is found to be a subsegment of a line edge meaning the edge will have \"hard\" normals\n\n\n          let found = false;\n\n          for (let i = 0, l = distances.length; i < l; i += 2) {\n            if (d0 >= distances[i] && d1 <= distances[i + 1]) {\n              found = true;\n              break;\n            }\n          }\n\n          if (found) {\n            continue;\n          }\n        }\n      }\n\n      const info = {\n        index: index,\n        tri: tri\n      };\n      halfEdgeList[hash] = info;\n    }\n  } // Iterate until we've tried to connect all faces to share normals\n\n\n  while (true) {\n    // Stop if there are no more faces left\n    let halfEdge = null;\n\n    for (const key in halfEdgeList) {\n      halfEdge = halfEdgeList[key];\n      break;\n    }\n\n    if (halfEdge === null) {\n      break;\n    } // Exhaustively find all connected faces\n\n\n    const queue = [halfEdge];\n\n    while (queue.length > 0) {\n      // initialize all vertex normals in this triangle\n      const tri = queue.pop().tri;\n      const vertices = tri.vertices;\n      const vertNormals = tri.normals;\n      const faceNormal = tri.faceNormal; // Check if any edge is connected to another triangle edge\n\n      const vertCount = vertices.length;\n\n      for (let i2 = 0; i2 < vertCount; i2++) {\n        const index = i2;\n        const next = (i2 + 1) % vertCount;\n        const v0 = vertices[index];\n        const v1 = vertices[next]; // delete this triangle from the list so it won't be found again\n\n        const hash = hashEdge(v0, v1);\n        delete halfEdgeList[hash];\n        const reverseHash = hashEdge(v1, v0);\n        const otherInfo = halfEdgeList[reverseHash];\n\n        if (otherInfo) {\n          const otherTri = otherInfo.tri;\n          const otherIndex = otherInfo.index;\n          const otherNormals = otherTri.normals;\n          const otherVertCount = otherNormals.length;\n          const otherFaceNormal = otherTri.faceNormal; // NOTE: If the angle between faces is > 67.5 degrees then assume it's\n          // hard edge. There are some cases where the line segments do not line up exactly\n          // with or span multiple triangle edges (see Lunar Vehicle wheels).\n\n          if (Math.abs(otherTri.faceNormal.dot(tri.faceNormal)) < 0.25) {\n            continue;\n          } // if this triangle has already been traversed then it won't be in\n          // the halfEdgeList. If it has not then add it to the queue and delete\n          // it so it won't be found again.\n\n\n          if (reverseHash in halfEdgeList) {\n            queue.push(otherInfo);\n            delete halfEdgeList[reverseHash];\n          } // share the first normal\n\n\n          const otherNext = (otherIndex + 1) % otherVertCount;\n\n          if (vertNormals[index] && otherNormals[otherNext] && vertNormals[index] !== otherNormals[otherNext]) {\n            otherNormals[otherNext].norm.add(vertNormals[index].norm);\n            vertNormals[index].norm = otherNormals[otherNext].norm;\n          }\n\n          let sharedNormal1 = vertNormals[index] || otherNormals[otherNext];\n\n          if (sharedNormal1 === null) {\n            // it's possible to encounter an edge of a triangle that has already been traversed meaning\n            // both edges already have different normals defined and shared. To work around this we create\n            // a wrapper object so when those edges are merged the normals can be updated everywhere.\n            sharedNormal1 = {\n              norm: new Vector3()\n            };\n            normals.push(sharedNormal1.norm);\n          }\n\n          if (vertNormals[index] === null) {\n            vertNormals[index] = sharedNormal1;\n            sharedNormal1.norm.add(faceNormal);\n          }\n\n          if (otherNormals[otherNext] === null) {\n            otherNormals[otherNext] = sharedNormal1;\n            sharedNormal1.norm.add(otherFaceNormal);\n          } // share the second normal\n\n\n          if (vertNormals[next] && otherNormals[otherIndex] && vertNormals[next] !== otherNormals[otherIndex]) {\n            otherNormals[otherIndex].norm.add(vertNormals[next].norm);\n            vertNormals[next].norm = otherNormals[otherIndex].norm;\n          }\n\n          let sharedNormal2 = vertNormals[next] || otherNormals[otherIndex];\n\n          if (sharedNormal2 === null) {\n            sharedNormal2 = {\n              norm: new Vector3()\n            };\n            normals.push(sharedNormal2.norm);\n          }\n\n          if (vertNormals[next] === null) {\n            vertNormals[next] = sharedNormal2;\n            sharedNormal2.norm.add(faceNormal);\n          }\n\n          if (otherNormals[otherIndex] === null) {\n            otherNormals[otherIndex] = sharedNormal2;\n            sharedNormal2.norm.add(otherFaceNormal);\n          }\n        }\n      }\n    }\n  } // The normals of each face have been added up so now we average them by normalizing the vector.\n\n\n  for (let i = 0, l = normals.length; i < l; i++) {\n    normals[i].normalize();\n  }\n}\n\nfunction isPartType(type) {\n  return type === 'Part' || type === 'Unofficial_Part';\n}\n\nfunction isPrimitiveType(type) {\n  return /primitive/i.test(type) || type === 'Subpart';\n}\n\nclass LineParser {\n  constructor(line, lineNumber) {\n    this.line = line;\n    this.lineLength = line.length;\n    this.currentCharIndex = 0;\n    this.currentChar = ' ';\n    this.lineNumber = lineNumber;\n  }\n\n  seekNonSpace() {\n    while (this.currentCharIndex < this.lineLength) {\n      this.currentChar = this.line.charAt(this.currentCharIndex);\n\n      if (this.currentChar !== ' ' && this.currentChar !== '\\t') {\n        return;\n      }\n\n      this.currentCharIndex++;\n    }\n  }\n\n  getToken() {\n    const pos0 = this.currentCharIndex++; // Seek space\n\n    while (this.currentCharIndex < this.lineLength) {\n      this.currentChar = this.line.charAt(this.currentCharIndex);\n\n      if (this.currentChar === ' ' || this.currentChar === '\\t') {\n        break;\n      }\n\n      this.currentCharIndex++;\n    }\n\n    const pos1 = this.currentCharIndex;\n    this.seekNonSpace();\n    return this.line.substring(pos0, pos1);\n  }\n\n  getVector() {\n    return new Vector3(parseFloat(this.getToken()), parseFloat(this.getToken()), parseFloat(this.getToken()));\n  }\n\n  getRemainingString() {\n    return this.line.substring(this.currentCharIndex, this.lineLength);\n  }\n\n  isAtTheEnd() {\n    return this.currentCharIndex >= this.lineLength;\n  }\n\n  setToEnd() {\n    this.currentCharIndex = this.lineLength;\n  }\n\n  getLineNumberString() {\n    return this.lineNumber >= 0 ? ' at line ' + this.lineNumber : '';\n  }\n\n} // Fetches and parses an intermediate representation of LDraw parts files.\n\n\nclass LDrawParsedCache {\n  constructor(loader) {\n    this.loader = loader;\n    this._cache = {};\n  }\n\n  cloneResult(original) {\n    const result = {}; // vertices are transformed and normals computed before being converted to geometry\n    // so these pieces must be cloned.\n\n    result.faces = original.faces.map(face => {\n      return {\n        colorCode: face.colorCode,\n        material: face.material,\n        vertices: face.vertices.map(v => v.clone()),\n        normals: face.normals.map(() => null),\n        faceNormal: null\n      };\n    });\n    result.conditionalSegments = original.conditionalSegments.map(face => {\n      return {\n        colorCode: face.colorCode,\n        material: face.material,\n        vertices: face.vertices.map(v => v.clone()),\n        controlPoints: face.controlPoints.map(v => v.clone())\n      };\n    });\n    result.lineSegments = original.lineSegments.map(face => {\n      return {\n        colorCode: face.colorCode,\n        material: face.material,\n        vertices: face.vertices.map(v => v.clone())\n      };\n    }); // none if this is subsequently modified\n\n    result.type = original.type;\n    result.category = original.category;\n    result.keywords = original.keywords;\n    result.subobjects = original.subobjects;\n    result.totalFaces = original.totalFaces;\n    result.startingConstructionStep = original.startingConstructionStep;\n    result.materials = original.materials;\n    result.group = null;\n    return result;\n  }\n\n  async fetchData(fileName) {\n    let triedLowerCase = false;\n    let locationState = FILE_LOCATION_AS_IS;\n\n    while (locationState !== FILE_LOCATION_NOT_FOUND) {\n      let subobjectURL = fileName;\n\n      switch (locationState) {\n        case FILE_LOCATION_AS_IS:\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_PARTS:\n          subobjectURL = 'parts/' + subobjectURL;\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_P:\n          subobjectURL = 'p/' + subobjectURL;\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_MODELS:\n          subobjectURL = 'models/' + subobjectURL;\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_RELATIVE:\n          subobjectURL = fileName.substring(0, fileName.lastIndexOf('/') + 1) + subobjectURL;\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_ABSOLUTE:\n          if (triedLowerCase) {\n            // Try absolute path\n            locationState = FILE_LOCATION_NOT_FOUND;\n          } else {\n            // Next attempt is lower case\n            fileName = fileName.toLowerCase();\n            subobjectURL = fileName;\n            triedLowerCase = true;\n            locationState = FILE_LOCATION_AS_IS;\n          }\n\n          break;\n      }\n\n      const loader = this.loader;\n      const fileLoader = new FileLoader(loader.manager);\n      fileLoader.setPath(loader.partsLibraryPath);\n      fileLoader.setRequestHeader(loader.requestHeader);\n      fileLoader.setWithCredentials(loader.withCredentials);\n\n      try {\n        const text = await fileLoader.loadAsync(subobjectURL);\n        return text;\n      } catch {\n        continue;\n      }\n    }\n\n    throw new Error('LDrawLoader: Subobject \"' + fileName + '\" could not be loaded.');\n  }\n\n  parse(text, fileName = null) {\n    const loader = this.loader; // final results\n\n    const faces = [];\n    const lineSegments = [];\n    const conditionalSegments = [];\n    const subobjects = [];\n    const materials = {};\n\n    const getLocalMaterial = colorCode => {\n      return materials[colorCode] || null;\n    };\n\n    let type = 'Model';\n    let category = null;\n    let keywords = null;\n    let totalFaces = 0; // split into lines\n\n    if (text.indexOf('\\r\\n') !== -1) {\n      // This is faster than String.split with regex that splits on both\n      text = text.replace(/\\r\\n/g, '\\n');\n    }\n\n    const lines = text.split('\\n');\n    const numLines = lines.length;\n    let parsingEmbeddedFiles = false;\n    let currentEmbeddedFileName = null;\n    let currentEmbeddedText = null;\n    let bfcCertified = false;\n    let bfcCCW = true;\n    let bfcInverted = false;\n    let bfcCull = true;\n    let startingConstructionStep = false; // Parse all line commands\n\n    for (let lineIndex = 0; lineIndex < numLines; lineIndex++) {\n      const line = lines[lineIndex];\n      if (line.length === 0) continue;\n\n      if (parsingEmbeddedFiles) {\n        if (line.startsWith('0 FILE ')) {\n          // Save previous embedded file in the cache\n          this.setData(currentEmbeddedFileName, currentEmbeddedText); // New embedded text file\n\n          currentEmbeddedFileName = line.substring(7);\n          currentEmbeddedText = '';\n        } else {\n          currentEmbeddedText += line + '\\n';\n        }\n\n        continue;\n      }\n\n      const lp = new LineParser(line, lineIndex + 1);\n      lp.seekNonSpace();\n\n      if (lp.isAtTheEnd()) {\n        // Empty line\n        continue;\n      } // Parse the line type\n\n\n      const lineType = lp.getToken();\n      let material;\n      let colorCode;\n      let segment;\n      let ccw;\n      let doubleSided;\n      let v0, v1, v2, v3, c0, c1;\n\n      switch (lineType) {\n        // Line type 0: Comment or META\n        case '0':\n          // Parse meta directive\n          const meta = lp.getToken();\n\n          if (meta) {\n            switch (meta) {\n              case '!LDRAW_ORG':\n                type = lp.getToken();\n                break;\n\n              case '!COLOUR':\n                material = loader.parseColorMetaDirective(lp);\n\n                if (material) {\n                  materials[material.userData.code] = material;\n                } else {\n                  console.warn('LDrawLoader: Error parsing material' + lp.getLineNumberString());\n                }\n\n                break;\n\n              case '!CATEGORY':\n                category = lp.getToken();\n                break;\n\n              case '!KEYWORDS':\n                const newKeywords = lp.getRemainingString().split(',');\n\n                if (newKeywords.length > 0) {\n                  if (!keywords) {\n                    keywords = [];\n                  }\n\n                  newKeywords.forEach(function (keyword) {\n                    keywords.push(keyword.trim());\n                  });\n                }\n\n                break;\n\n              case 'FILE':\n                if (lineIndex > 0) {\n                  // Start embedded text files parsing\n                  parsingEmbeddedFiles = true;\n                  currentEmbeddedFileName = lp.getRemainingString();\n                  currentEmbeddedText = '';\n                  bfcCertified = false;\n                  bfcCCW = true;\n                }\n\n                break;\n\n              case 'BFC':\n                // Changes to the backface culling state\n                while (!lp.isAtTheEnd()) {\n                  const token = lp.getToken();\n\n                  switch (token) {\n                    case 'CERTIFY':\n                    case 'NOCERTIFY':\n                      bfcCertified = token === 'CERTIFY';\n                      bfcCCW = true;\n                      break;\n\n                    case 'CW':\n                    case 'CCW':\n                      bfcCCW = token === 'CCW';\n                      break;\n\n                    case 'INVERTNEXT':\n                      bfcInverted = true;\n                      break;\n\n                    case 'CLIP':\n                    case 'NOCLIP':\n                      bfcCull = token === 'CLIP';\n                      break;\n\n                    default:\n                      console.warn('THREE.LDrawLoader: BFC directive \"' + token + '\" is unknown.');\n                      break;\n                  }\n                }\n\n                break;\n\n              case 'STEP':\n                startingConstructionStep = true;\n                break;\n            }\n          }\n\n          break;\n        // Line type 1: Sub-object file\n\n        case '1':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          const posX = parseFloat(lp.getToken());\n          const posY = parseFloat(lp.getToken());\n          const posZ = parseFloat(lp.getToken());\n          const m0 = parseFloat(lp.getToken());\n          const m1 = parseFloat(lp.getToken());\n          const m2 = parseFloat(lp.getToken());\n          const m3 = parseFloat(lp.getToken());\n          const m4 = parseFloat(lp.getToken());\n          const m5 = parseFloat(lp.getToken());\n          const m6 = parseFloat(lp.getToken());\n          const m7 = parseFloat(lp.getToken());\n          const m8 = parseFloat(lp.getToken());\n          const matrix = new Matrix4().set(m0, m1, m2, posX, m3, m4, m5, posY, m6, m7, m8, posZ, 0, 0, 0, 1);\n          let fileName = lp.getRemainingString().trim().replace(/\\\\/g, '/');\n\n          if (loader.fileMap[fileName]) {\n            // Found the subobject path in the preloaded file path map\n            fileName = loader.fileMap[fileName];\n          } else {\n            // Standardized subfolders\n            if (fileName.startsWith('s/')) {\n              fileName = 'parts/' + fileName;\n            } else if (fileName.startsWith('48/')) {\n              fileName = 'p/' + fileName;\n            }\n          }\n\n          subobjects.push({\n            material: material,\n            colorCode: colorCode,\n            matrix: matrix,\n            fileName: fileName,\n            inverted: bfcInverted,\n            startingConstructionStep: startingConstructionStep\n          });\n          bfcInverted = false;\n          break;\n        // Line type 2: Line segment\n\n        case '2':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          v0 = lp.getVector();\n          v1 = lp.getVector();\n          segment = {\n            material: material,\n            colorCode: colorCode,\n            vertices: [v0, v1]\n          };\n          lineSegments.push(segment);\n          break;\n        // Line type 5: Conditional Line segment\n\n        case '5':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          v0 = lp.getVector();\n          v1 = lp.getVector();\n          c0 = lp.getVector();\n          c1 = lp.getVector();\n          segment = {\n            material: material,\n            colorCode: colorCode,\n            vertices: [v0, v1],\n            controlPoints: [c0, c1]\n          };\n          conditionalSegments.push(segment);\n          break;\n        // Line type 3: Triangle\n\n        case '3':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          ccw = bfcCCW;\n          doubleSided = !bfcCertified || !bfcCull;\n\n          if (ccw === true) {\n            v0 = lp.getVector();\n            v1 = lp.getVector();\n            v2 = lp.getVector();\n          } else {\n            v2 = lp.getVector();\n            v1 = lp.getVector();\n            v0 = lp.getVector();\n          }\n\n          faces.push({\n            material: material,\n            colorCode: colorCode,\n            faceNormal: null,\n            vertices: [v0, v1, v2],\n            normals: [null, null, null]\n          });\n          totalFaces++;\n\n          if (doubleSided === true) {\n            faces.push({\n              material: material,\n              colorCode: colorCode,\n              faceNormal: null,\n              vertices: [v2, v1, v0],\n              normals: [null, null, null]\n            });\n            totalFaces++;\n          }\n\n          break;\n        // Line type 4: Quadrilateral\n\n        case '4':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          ccw = bfcCCW;\n          doubleSided = !bfcCertified || !bfcCull;\n\n          if (ccw === true) {\n            v0 = lp.getVector();\n            v1 = lp.getVector();\n            v2 = lp.getVector();\n            v3 = lp.getVector();\n          } else {\n            v3 = lp.getVector();\n            v2 = lp.getVector();\n            v1 = lp.getVector();\n            v0 = lp.getVector();\n          } // specifically place the triangle diagonal in the v0 and v1 slots so we can\n          // account for the doubling of vertices later when smoothing normals.\n\n\n          faces.push({\n            material: material,\n            colorCode: colorCode,\n            faceNormal: null,\n            vertices: [v0, v1, v2, v3],\n            normals: [null, null, null, null]\n          });\n          totalFaces += 2;\n\n          if (doubleSided === true) {\n            faces.push({\n              material: material,\n              colorCode: colorCode,\n              faceNormal: null,\n              vertices: [v3, v2, v1, v0],\n              normals: [null, null, null, null]\n            });\n            totalFaces += 2;\n          }\n\n          break;\n\n        default:\n          throw new Error('LDrawLoader: Unknown line type \"' + lineType + '\"' + lp.getLineNumberString() + '.');\n      }\n    }\n\n    if (parsingEmbeddedFiles) {\n      this.setData(currentEmbeddedFileName, currentEmbeddedText);\n    }\n\n    return {\n      faces,\n      conditionalSegments,\n      lineSegments,\n      type,\n      category,\n      keywords,\n      subobjects,\n      totalFaces,\n      startingConstructionStep,\n      materials,\n      fileName,\n      group: null\n    };\n  } // returns an (optionally cloned) instance of the data\n\n\n  getData(fileName, clone = true) {\n    const key = fileName.toLowerCase();\n    const result = this._cache[key];\n\n    if (result === null || result instanceof Promise) {\n      return null;\n    }\n\n    if (clone) {\n      return this.cloneResult(result);\n    } else {\n      return result;\n    }\n  } // kicks off a fetch and parse of the requested data if it hasn't already been loaded. Returns when\n  // the data is ready to use and can be retrieved synchronously with \"getData\".\n\n\n  async ensureDataLoaded(fileName) {\n    const key = fileName.toLowerCase();\n\n    if (!(key in this._cache)) {\n      // replace the promise with a copy of the parsed data for immediate processing\n      this._cache[key] = this.fetchData(fileName).then(text => {\n        const info = this.parse(text, fileName);\n        this._cache[key] = info;\n        return info;\n      });\n    }\n\n    await this._cache[key];\n  } // sets the data in the cache from parsed data\n\n\n  setData(fileName, text) {\n    const key = fileName.toLowerCase();\n    this._cache[key] = this.parse(text, fileName);\n  }\n\n} // returns the material for an associated color code. If the color code is 16 for a face or 24 for\n// an edge then the passthroughColorCode is used.\n\n\nfunction getMaterialFromCode(colorCode, parentColorCode, materialHierarchy, forEdge) {\n  const isPassthrough = !forEdge && colorCode === MAIN_COLOUR_CODE || forEdge && colorCode === MAIN_EDGE_COLOUR_CODE;\n\n  if (isPassthrough) {\n    colorCode = parentColorCode;\n  }\n\n  return materialHierarchy[colorCode] || null;\n} // Class used to parse and build LDraw parts as three.js objects and cache them if they're a \"Part\" type.\n\n\nclass LDrawPartsGeometryCache {\n  constructor(loader) {\n    this.loader = loader;\n    this.parseCache = new LDrawParsedCache(loader);\n    this._cache = {};\n  } // Convert the given file information into a mesh by processing subobjects.\n\n\n  async processIntoMesh(info) {\n    const loader = this.loader;\n    const parseCache = this.parseCache;\n    const faceMaterials = new Set(); // Processes the part subobject information to load child parts and merge geometry onto part\n    // piece object.\n\n    const processInfoSubobjects = async (info, subobject = null) => {\n      const subobjects = info.subobjects;\n      const promises = []; // Trigger load of all subobjects. If a subobject isn't a primitive then load it as a separate\n      // group which lets instruction steps apply correctly.\n\n      for (let i = 0, l = subobjects.length; i < l; i++) {\n        const subobject = subobjects[i];\n        const promise = parseCache.ensureDataLoaded(subobject.fileName).then(() => {\n          const subobjectInfo = parseCache.getData(subobject.fileName, false);\n\n          if (!isPrimitiveType(subobjectInfo.type)) {\n            return this.loadModel(subobject.fileName).catch(error => {\n              console.warn(error);\n              return null;\n            });\n          }\n\n          return processInfoSubobjects(parseCache.getData(subobject.fileName), subobject);\n        });\n        promises.push(promise);\n      }\n\n      const group = new Group();\n      group.userData.category = info.category;\n      group.userData.keywords = info.keywords;\n      info.group = group;\n      const subobjectInfos = await Promise.all(promises);\n\n      for (let i = 0, l = subobjectInfos.length; i < l; i++) {\n        const subobject = info.subobjects[i];\n        const subobjectInfo = subobjectInfos[i];\n\n        if (subobjectInfo === null) {\n          // the subobject failed to load\n          continue;\n        } // if the subobject was loaded as a separate group then apply the parent scopes materials\n\n\n        if (subobjectInfo.isGroup) {\n          const subobjectGroup = subobjectInfo;\n          subobject.matrix.decompose(subobjectGroup.position, subobjectGroup.quaternion, subobjectGroup.scale);\n          subobjectGroup.userData.startingConstructionStep = subobject.startingConstructionStep;\n          subobjectGroup.name = subobject.fileName;\n          loader.applyMaterialsToMesh(subobjectGroup, subobject.colorCode, info.materials);\n          group.add(subobjectGroup);\n          continue;\n        } // add the subobject group if it has children in case it has both children and primitives\n\n\n        if (subobjectInfo.group.children.length) {\n          group.add(subobjectInfo.group);\n        } // transform the primitives into the local space of the parent piece and append them to\n        // to the parent primitives list.\n\n\n        const parentLineSegments = info.lineSegments;\n        const parentConditionalSegments = info.conditionalSegments;\n        const parentFaces = info.faces;\n        const lineSegments = subobjectInfo.lineSegments;\n        const conditionalSegments = subobjectInfo.conditionalSegments;\n        const faces = subobjectInfo.faces;\n        const matrix = subobject.matrix;\n        const inverted = subobject.inverted;\n        const matrixScaleInverted = matrix.determinant() < 0;\n        const colorCode = subobject.colorCode;\n        const lineColorCode = colorCode === MAIN_COLOUR_CODE ? MAIN_EDGE_COLOUR_CODE : colorCode;\n\n        for (let i = 0, l = lineSegments.length; i < l; i++) {\n          const ls = lineSegments[i];\n          const vertices = ls.vertices;\n          vertices[0].applyMatrix4(matrix);\n          vertices[1].applyMatrix4(matrix);\n          ls.colorCode = ls.colorCode === MAIN_EDGE_COLOUR_CODE ? lineColorCode : ls.colorCode;\n          ls.material = ls.material || getMaterialFromCode(ls.colorCode, ls.colorCode, info.materials, true);\n          parentLineSegments.push(ls);\n        }\n\n        for (let i = 0, l = conditionalSegments.length; i < l; i++) {\n          const os = conditionalSegments[i];\n          const vertices = os.vertices;\n          const controlPoints = os.controlPoints;\n          vertices[0].applyMatrix4(matrix);\n          vertices[1].applyMatrix4(matrix);\n          controlPoints[0].applyMatrix4(matrix);\n          controlPoints[1].applyMatrix4(matrix);\n          os.colorCode = os.colorCode === MAIN_EDGE_COLOUR_CODE ? lineColorCode : os.colorCode;\n          os.material = os.material || getMaterialFromCode(os.colorCode, os.colorCode, info.materials, true);\n          parentConditionalSegments.push(os);\n        }\n\n        for (let i = 0, l = faces.length; i < l; i++) {\n          const tri = faces[i];\n          const vertices = tri.vertices;\n\n          for (let i = 0, l = vertices.length; i < l; i++) {\n            vertices[i].applyMatrix4(matrix);\n          }\n\n          tri.colorCode = tri.colorCode === MAIN_COLOUR_CODE ? colorCode : tri.colorCode;\n          tri.material = tri.material || getMaterialFromCode(tri.colorCode, colorCode, info.materials, false);\n          faceMaterials.add(tri.colorCode); // If the scale of the object is negated then the triangle winding order\n          // needs to be flipped.\n\n          if (matrixScaleInverted !== inverted) {\n            vertices.reverse();\n          }\n\n          parentFaces.push(tri);\n        }\n\n        info.totalFaces += subobjectInfo.totalFaces;\n      } // Apply the parent subobjects pass through material code to this object. This is done several times due\n      // to material scoping.\n\n\n      if (subobject) {\n        loader.applyMaterialsToMesh(group, subobject.colorCode, info.materials);\n      }\n\n      return info;\n    }; // Track material use to see if we need to use the normal smooth slow path for hard edges.\n\n\n    for (let i = 0, l = info.faces; i < l; i++) {\n      faceMaterials.add(info.faces[i].colorCode);\n    }\n\n    await processInfoSubobjects(info);\n\n    if (loader.smoothNormals) {\n      const checkSubSegments = faceMaterials.size > 1;\n      generateFaceNormals(info.faces);\n      smoothNormals(info.faces, info.lineSegments, checkSubSegments);\n    } // Add the primitive objects and metadata.\n\n\n    const group = info.group;\n\n    if (info.faces.length > 0) {\n      group.add(createObject(info.faces, 3, false, info.totalFaces));\n    }\n\n    if (info.lineSegments.length > 0) {\n      group.add(createObject(info.lineSegments, 2));\n    }\n\n    if (info.conditionalSegments.length > 0) {\n      group.add(createObject(info.conditionalSegments, 2, true));\n    }\n\n    return group;\n  }\n\n  hasCachedModel(fileName) {\n    return fileName !== null && fileName.toLowerCase() in this._cache;\n  }\n\n  async getCachedModel(fileName) {\n    if (fileName !== null && this.hasCachedModel(fileName)) {\n      const key = fileName.toLowerCase();\n      const group = await this._cache[key];\n      return group.clone();\n    } else {\n      return null;\n    }\n  } // Loads and parses the model with the given file name. Returns a cached copy if available.\n\n\n  async loadModel(fileName) {\n    const parseCache = this.parseCache;\n    const key = fileName.toLowerCase();\n\n    if (this.hasCachedModel(fileName)) {\n      // Return cached model if available.\n      return this.getCachedModel(fileName);\n    } else {\n      // Otherwise parse a new model.\n      // Ensure the file data is loaded and pre parsed.\n      await parseCache.ensureDataLoaded(fileName);\n      const info = parseCache.getData(fileName);\n      const promise = this.processIntoMesh(info); // Now that the file has loaded it's possible that another part parse has been waiting in parallel\n      // so check the cache again to see if it's been added since the last async operation so we don't\n      // do unnecessary work.\n\n      if (this.hasCachedModel(fileName)) {\n        return this.getCachedModel(fileName);\n      } // Cache object if it's a part so it can be reused later.\n\n\n      if (isPartType(info.type)) {\n        this._cache[key] = promise;\n      } // return a copy\n\n\n      const group = await promise;\n      return group.clone();\n    }\n  } // parses the given model text into a renderable object. Returns cached copy if available.\n\n\n  async parseModel(text) {\n    const parseCache = this.parseCache;\n    const info = parseCache.parse(text);\n\n    if (isPartType(info.type) && this.hasCachedModel(info.fileName)) {\n      return this.getCachedModel(info.fileName);\n    }\n\n    return this.processIntoMesh(info);\n  }\n\n}\n\nfunction sortByMaterial(a, b) {\n  if (a.colorCode === b.colorCode) {\n    return 0;\n  }\n\n  if (a.colorCode < b.colorCode) {\n    return -1;\n  }\n\n  return 1;\n}\n\nfunction createObject(elements, elementSize, isConditionalSegments = false, totalElements = null) {\n  // Creates a LineSegments (elementSize = 2) or a Mesh (elementSize = 3 )\n  // With per face / segment material, implemented with mesh groups and materials array\n  // Sort the faces or line segments by color code to make later the mesh groups\n  elements.sort(sortByMaterial);\n\n  if (totalElements === null) {\n    totalElements = elements.length;\n  }\n\n  const positions = new Float32Array(elementSize * totalElements * 3);\n  const normals = elementSize === 3 ? new Float32Array(elementSize * totalElements * 3) : null;\n  const materials = [];\n  const quadArray = new Array(6);\n  const bufferGeometry = new BufferGeometry();\n  let prevMaterial = null;\n  let index0 = 0;\n  let numGroupVerts = 0;\n  let offset = 0;\n\n  for (let iElem = 0, nElem = elements.length; iElem < nElem; iElem++) {\n    const elem = elements[iElem];\n    let vertices = elem.vertices;\n\n    if (vertices.length === 4) {\n      quadArray[0] = vertices[0];\n      quadArray[1] = vertices[1];\n      quadArray[2] = vertices[2];\n      quadArray[3] = vertices[0];\n      quadArray[4] = vertices[2];\n      quadArray[5] = vertices[3];\n      vertices = quadArray;\n    }\n\n    for (let j = 0, l = vertices.length; j < l; j++) {\n      const v = vertices[j];\n      const index = offset + j * 3;\n      positions[index + 0] = v.x;\n      positions[index + 1] = v.y;\n      positions[index + 2] = v.z;\n    } // create the normals array if this is a set of faces\n\n\n    if (elementSize === 3) {\n      if (!elem.faceNormal) {\n        const v0 = vertices[0];\n        const v1 = vertices[1];\n        const v2 = vertices[2];\n\n        _tempVec0.subVectors(v1, v0);\n\n        _tempVec1.subVectors(v2, v1);\n\n        elem.faceNormal = new Vector3().crossVectors(_tempVec0, _tempVec1).normalize();\n      }\n\n      let elemNormals = elem.normals;\n\n      if (elemNormals.length === 4) {\n        quadArray[0] = elemNormals[0];\n        quadArray[1] = elemNormals[1];\n        quadArray[2] = elemNormals[2];\n        quadArray[3] = elemNormals[0];\n        quadArray[4] = elemNormals[2];\n        quadArray[5] = elemNormals[3];\n        elemNormals = quadArray;\n      }\n\n      for (let j = 0, l = elemNormals.length; j < l; j++) {\n        // use face normal if a vertex normal is not provided\n        let n = elem.faceNormal;\n\n        if (elemNormals[j]) {\n          n = elemNormals[j].norm;\n        }\n\n        const index = offset + j * 3;\n        normals[index + 0] = n.x;\n        normals[index + 1] = n.y;\n        normals[index + 2] = n.z;\n      }\n    }\n\n    if (prevMaterial !== elem.colorCode) {\n      if (prevMaterial !== null) {\n        bufferGeometry.addGroup(index0, numGroupVerts, materials.length - 1);\n      }\n\n      const material = elem.material;\n\n      if (material !== null) {\n        if (elementSize === 3) {\n          materials.push(material);\n        } else if (elementSize === 2) {\n          if (material !== null) {\n            if (isConditionalSegments) {\n              materials.push(material.userData.edgeMaterial.userData.conditionalEdgeMaterial);\n            } else {\n              materials.push(material.userData.edgeMaterial);\n            }\n          } else {\n            materials.push(null);\n          }\n        }\n      } else {\n        // If a material has not been made available yet then keep the color code string in the material array\n        // to save the spot for the material once a parent scopes materials are being applied to the object.\n        materials.push(elem.colorCode);\n      }\n\n      prevMaterial = elem.colorCode;\n      index0 = offset / 3;\n      numGroupVerts = vertices.length;\n    } else {\n      numGroupVerts += vertices.length;\n    }\n\n    offset += 3 * vertices.length;\n  }\n\n  if (numGroupVerts > 0) {\n    bufferGeometry.addGroup(index0, Infinity, materials.length - 1);\n  }\n\n  bufferGeometry.setAttribute('position', new BufferAttribute(positions, 3));\n\n  if (normals !== null) {\n    bufferGeometry.setAttribute('normal', new BufferAttribute(normals, 3));\n  }\n\n  let object3d = null;\n\n  if (elementSize === 2) {\n    if (isConditionalSegments) {\n      object3d = new ConditionalLineSegments(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n    } else {\n      object3d = new LineSegments(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n    }\n  } else if (elementSize === 3) {\n    object3d = new Mesh(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n  }\n\n  if (isConditionalSegments) {\n    object3d.isConditionalLine = true;\n    const controlArray0 = new Float32Array(elements.length * 3 * 2);\n    const controlArray1 = new Float32Array(elements.length * 3 * 2);\n    const directionArray = new Float32Array(elements.length * 3 * 2);\n\n    for (let i = 0, l = elements.length; i < l; i++) {\n      const os = elements[i];\n      const vertices = os.vertices;\n      const controlPoints = os.controlPoints;\n      const c0 = controlPoints[0];\n      const c1 = controlPoints[1];\n      const v0 = vertices[0];\n      const v1 = vertices[1];\n      const index = i * 3 * 2;\n      controlArray0[index + 0] = c0.x;\n      controlArray0[index + 1] = c0.y;\n      controlArray0[index + 2] = c0.z;\n      controlArray0[index + 3] = c0.x;\n      controlArray0[index + 4] = c0.y;\n      controlArray0[index + 5] = c0.z;\n      controlArray1[index + 0] = c1.x;\n      controlArray1[index + 1] = c1.y;\n      controlArray1[index + 2] = c1.z;\n      controlArray1[index + 3] = c1.x;\n      controlArray1[index + 4] = c1.y;\n      controlArray1[index + 5] = c1.z;\n      directionArray[index + 0] = v1.x - v0.x;\n      directionArray[index + 1] = v1.y - v0.y;\n      directionArray[index + 2] = v1.z - v0.z;\n      directionArray[index + 3] = v1.x - v0.x;\n      directionArray[index + 4] = v1.y - v0.y;\n      directionArray[index + 5] = v1.z - v0.z;\n    }\n\n    bufferGeometry.setAttribute('control0', new BufferAttribute(controlArray0, 3, false));\n    bufferGeometry.setAttribute('control1', new BufferAttribute(controlArray1, 3, false));\n    bufferGeometry.setAttribute('direction', new BufferAttribute(directionArray, 3, false));\n  }\n\n  return object3d;\n} //\n\n\nclass LDrawLoader extends Loader {\n  constructor(manager) {\n    super(manager); // Array of THREE.Material\n\n    this.materials = [];\n    this.materialLibrary = {}; // This also allows to handle the embedded text files (\"0 FILE\" lines)\n\n    this.partsCache = new LDrawPartsGeometryCache(this); // This object is a map from file names to paths. It agilizes the paths search. If it is not set then files will be searched by trial and error.\n\n    this.fileMap = {}; // Initializes the materials library with default materials\n\n    this.setMaterials([]); // If this flag is set to true the vertex normals will be smoothed.\n\n    this.smoothNormals = true; // The path to load parts from the LDraw parts library from.\n\n    this.partsLibraryPath = '';\n  }\n\n  setPartsLibraryPath(path) {\n    this.partsLibraryPath = path;\n    return this;\n  }\n\n  async preloadMaterials(url) {\n    const fileLoader = new FileLoader(this.manager);\n    fileLoader.setPath(this.path);\n    fileLoader.setRequestHeader(this.requestHeader);\n    fileLoader.setWithCredentials(this.withCredentials);\n    const text = await fileLoader.loadAsync(url);\n    const colorLineRegex = /^0 !COLOUR/;\n    const lines = text.split(/[\\n\\r]/g);\n    const materials = [];\n\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const line = lines[i];\n\n      if (colorLineRegex.test(line)) {\n        const directive = line.replace(colorLineRegex, '');\n        const material = this.parseColorMetaDirective(new LineParser(directive));\n        materials.push(material);\n      }\n    }\n\n    this.setMaterials(materials);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const fileLoader = new FileLoader(this.manager);\n    fileLoader.setPath(this.path);\n    fileLoader.setRequestHeader(this.requestHeader);\n    fileLoader.setWithCredentials(this.withCredentials);\n    fileLoader.load(url, text => {\n      this.partsCache.parseModel(text, this.materialLibrary).then(group => {\n        this.applyMaterialsToMesh(group, MAIN_COLOUR_CODE, this.materialLibrary, true);\n        this.computeConstructionSteps(group);\n        onLoad(group);\n      }).catch(onError);\n    }, onProgress, onError);\n  }\n\n  parse(text, onLoad) {\n    this.partsCache.parseModel(text, this.materialLibrary).then(group => {\n      this.computeConstructionSteps(group);\n      onLoad(group);\n    });\n  }\n\n  setMaterials(materials) {\n    this.materialLibrary = {};\n    this.materials = [];\n\n    for (let i = 0, l = materials.length; i < l; i++) {\n      this.addMaterial(materials[i]);\n    } // Add default main triangle and line edge materials (used in pieces that can be colored with a main color)\n\n\n    this.addMaterial(this.parseColorMetaDirective(new LineParser('Main_Colour CODE 16 VALUE #FF8080 EDGE #333333')));\n    this.addMaterial(this.parseColorMetaDirective(new LineParser('Edge_Colour CODE 24 VALUE #A0A0A0 EDGE #333333')));\n    return this;\n  }\n\n  setFileMap(fileMap) {\n    this.fileMap = fileMap;\n    return this;\n  }\n\n  addMaterial(material) {\n    // Adds a material to the material library which is on top of the parse scopes stack. And also to the materials array\n    const matLib = this.materialLibrary;\n\n    if (!matLib[material.userData.code]) {\n      this.materials.push(material);\n      matLib[material.userData.code] = material;\n    }\n\n    return this;\n  }\n\n  getMaterial(colorCode) {\n    if (colorCode.startsWith('0x2')) {\n      // Special 'direct' material value (RGB color)\n      const color = colorCode.substring(3);\n      return this.parseColorMetaDirective(new LineParser('Direct_Color_' + color + ' CODE -1 VALUE #' + color + ' EDGE #' + color + ''));\n    }\n\n    return this.materialLibrary[colorCode] || null;\n  } // Applies the appropriate materials to a prebuilt hierarchy of geometry. Assumes that color codes are present\n  // in the material array if they need to be filled in.\n\n\n  applyMaterialsToMesh(group, parentColorCode, materialHierarchy, finalMaterialPass = false) {\n    // find any missing materials as indicated by a color code string and replace it with a material from the current material lib\n    const loader = this;\n    const parentIsPassthrough = parentColorCode === MAIN_COLOUR_CODE;\n    group.traverse(c => {\n      if (c.isMesh || c.isLineSegments) {\n        if (Array.isArray(c.material)) {\n          for (let i = 0, l = c.material.length; i < l; i++) {\n            if (!c.material[i].isMaterial) {\n              c.material[i] = getMaterial(c, c.material[i]);\n            }\n          }\n        } else if (!c.material.isMaterial) {\n          c.material = getMaterial(c, c.material);\n        }\n      }\n    }); // Returns the appropriate material for the object (line or face) given color code. If the code is \"pass through\"\n    // (24 for lines, 16 for edges) then the pass through color code is used. If that is also pass through then it's\n    // simply returned for the subsequent material application.\n\n    function getMaterial(c, colorCode) {\n      // if our parent is a passthrough color code and we don't have the current material color available then\n      // return early.\n      if (parentIsPassthrough && !(colorCode in materialHierarchy) && !finalMaterialPass) {\n        return colorCode;\n      }\n\n      const forEdge = c.isLineSegments || c.isConditionalLine;\n      const isPassthrough = !forEdge && colorCode === MAIN_COLOUR_CODE || forEdge && colorCode === MAIN_EDGE_COLOUR_CODE;\n\n      if (isPassthrough) {\n        colorCode = parentColorCode;\n      }\n\n      let material = null;\n\n      if (colorCode in materialHierarchy) {\n        material = materialHierarchy[colorCode];\n      } else if (finalMaterialPass) {\n        // see if we can get the final material from from the \"getMaterial\" function which will attempt to\n        // parse the \"direct\" colors\n        material = loader.getMaterial(colorCode);\n\n        if (material === null) {\n          // otherwise throw an error if this is final opportunity to set the material\n          throw new Error(`LDrawLoader: Material properties for code ${colorCode} not available.`);\n        }\n      } else {\n        return colorCode;\n      }\n\n      if (c.isLineSegments) {\n        material = material.userData.edgeMaterial;\n\n        if (c.isConditionalLine) {\n          material = material.userData.conditionalEdgeMaterial;\n        }\n      }\n\n      return material;\n    }\n  }\n\n  getMainMaterial() {\n    return this.getMaterial(MAIN_COLOUR_CODE);\n  }\n\n  getMainEdgeMaterial() {\n    return this.getMaterial(MAIN_EDGE_COLOUR_CODE);\n  }\n\n  parseColorMetaDirective(lineParser) {\n    // Parses a color definition and returns a THREE.Material\n    let code = null; // Triangle and line colors\n\n    let color = 0xff00ff;\n    let edgeColor = 0xff00ff; // Transparency\n\n    let alpha = 1;\n    let isTransparent = false; // Self-illumination:\n\n    let luminance = 0;\n    let finishType = FINISH_TYPE_DEFAULT;\n    let edgeMaterial = null;\n    const name = lineParser.getToken();\n\n    if (!name) {\n      throw new Error('LDrawLoader: Material name was expected after \"!COLOUR tag' + lineParser.getLineNumberString() + '.');\n    } // Parse tag tokens and their parameters\n\n\n    let token = null;\n\n    while (true) {\n      token = lineParser.getToken();\n\n      if (!token) {\n        break;\n      }\n\n      switch (token.toUpperCase()) {\n        case 'CODE':\n          code = lineParser.getToken();\n          break;\n\n        case 'VALUE':\n          color = lineParser.getToken();\n\n          if (color.startsWith('0x')) {\n            color = '#' + color.substring(2);\n          } else if (!color.startsWith('#')) {\n            throw new Error('LDrawLoader: Invalid color while parsing material' + lineParser.getLineNumberString() + '.');\n          }\n\n          break;\n\n        case 'EDGE':\n          edgeColor = lineParser.getToken();\n\n          if (edgeColor.startsWith('0x')) {\n            edgeColor = '#' + edgeColor.substring(2);\n          } else if (!edgeColor.startsWith('#')) {\n            // Try to see if edge color is a color code\n            edgeMaterial = this.getMaterial(edgeColor);\n\n            if (!edgeMaterial) {\n              throw new Error('LDrawLoader: Invalid edge color while parsing material' + lineParser.getLineNumberString() + '.');\n            } // Get the edge material for this triangle material\n\n\n            edgeMaterial = edgeMaterial.userData.edgeMaterial;\n          }\n\n          break;\n\n        case 'ALPHA':\n          alpha = parseInt(lineParser.getToken());\n\n          if (isNaN(alpha)) {\n            throw new Error('LDrawLoader: Invalid alpha value in material definition' + lineParser.getLineNumberString() + '.');\n          }\n\n          alpha = Math.max(0, Math.min(1, alpha / 255));\n\n          if (alpha < 1) {\n            isTransparent = true;\n          }\n\n          break;\n\n        case 'LUMINANCE':\n          luminance = parseInt(lineParser.getToken());\n\n          if (isNaN(luminance)) {\n            throw new Error('LDrawLoader: Invalid luminance value in material definition' + LineParser.getLineNumberString() + '.');\n          }\n\n          luminance = Math.max(0, Math.min(1, luminance / 255));\n          break;\n\n        case 'CHROME':\n          finishType = FINISH_TYPE_CHROME;\n          break;\n\n        case 'PEARLESCENT':\n          finishType = FINISH_TYPE_PEARLESCENT;\n          break;\n\n        case 'RUBBER':\n          finishType = FINISH_TYPE_RUBBER;\n          break;\n\n        case 'MATTE_METALLIC':\n          finishType = FINISH_TYPE_MATTE_METALLIC;\n          break;\n\n        case 'METAL':\n          finishType = FINISH_TYPE_METAL;\n          break;\n\n        case 'MATERIAL':\n          // Not implemented\n          lineParser.setToEnd();\n          break;\n\n        default:\n          throw new Error('LDrawLoader: Unknown token \"' + token + '\" while parsing material' + lineParser.getLineNumberString() + '.');\n      }\n    }\n\n    let material = null;\n\n    switch (finishType) {\n      case FINISH_TYPE_DEFAULT:\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.3,\n          metalness: 0\n        });\n        break;\n\n      case FINISH_TYPE_PEARLESCENT:\n        // Try to imitate pearlescency by making the surface glossy\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.3,\n          metalness: 0.25\n        });\n        break;\n\n      case FINISH_TYPE_CHROME:\n        // Mirror finish surface\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0,\n          metalness: 1\n        });\n        break;\n\n      case FINISH_TYPE_RUBBER:\n        // Rubber finish\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.9,\n          metalness: 0\n        });\n        break;\n\n      case FINISH_TYPE_MATTE_METALLIC:\n        // Brushed metal finish\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.8,\n          metalness: 0.4\n        });\n        break;\n\n      case FINISH_TYPE_METAL:\n        // Average metal finish\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.2,\n          metalness: 0.85\n        });\n        break;\n    }\n\n    material.transparent = isTransparent;\n    material.premultipliedAlpha = true;\n    material.opacity = alpha;\n    material.depthWrite = !isTransparent;\n    material.polygonOffset = true;\n    material.polygonOffsetFactor = 1;\n\n    if (luminance !== 0) {\n      material.emissive.set(material.color).multiplyScalar(luminance);\n    }\n\n    if (!edgeMaterial) {\n      // This is the material used for edges\n      edgeMaterial = new LineBasicMaterial({\n        color: edgeColor,\n        transparent: isTransparent,\n        opacity: alpha,\n        depthWrite: !isTransparent\n      });\n      edgeMaterial.userData.code = code;\n      edgeMaterial.name = name + ' - Edge'; // This is the material used for conditional edges\n\n      edgeMaterial.userData.conditionalEdgeMaterial = new LDrawConditionalLineMaterial({\n        fog: true,\n        transparent: isTransparent,\n        depthWrite: !isTransparent,\n        color: edgeColor,\n        opacity: alpha\n      });\n    }\n\n    material.userData.code = code;\n    material.name = name;\n    material.userData.edgeMaterial = edgeMaterial;\n    this.addMaterial(material);\n    return material;\n  }\n\n  computeConstructionSteps(model) {\n    // Sets userdata.constructionStep number in Group objects and userData.numConstructionSteps number in the root Group object.\n    let stepNumber = 0;\n    model.traverse(c => {\n      if (c.isGroup) {\n        if (c.userData.startingConstructionStep) {\n          stepNumber++;\n        }\n\n        c.userData.constructionStep = stepNumber;\n      }\n    });\n    model.userData.numConstructionSteps = stepNumber + 1;\n  }\n\n}\n\nexport { LDrawLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}