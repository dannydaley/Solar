{"ast":null,"code":"import _asyncToGenerator from \"/home/danny/Documents/Programming/Solar/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/home/danny/Documents/Programming/Solar/node_modules/@babel/runtime/regenerator/index.js\";\nfunction AmmoPhysics() {\n  return _AmmoPhysics.apply(this, arguments);\n}\nfunction _AmmoPhysics() {\n  _AmmoPhysics = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var AmmoLib, frameRate, collisionConfiguration, dispatcher, broadphase, solver, world, worldTransform, getShape, meshes, meshMap, addMesh, handleMesh, handleInstancedMesh, setMeshPosition, lastTime, step;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            step = function _step() {\n              var time = performance.now();\n              if (lastTime > 0) {\n                var delta = (time - lastTime) / 1000; // console.time( 'world.step' );\n\n                world.stepSimulation(delta, 10); // console.timeEnd( 'world.step' );\n              }\n\n              lastTime = time; //\n\n              for (var i = 0, l = meshes.length; i < l; i++) {\n                var mesh = meshes[i];\n                if (mesh.isInstancedMesh) {\n                  var array = mesh.instanceMatrix.array;\n                  var bodies = meshMap.get(mesh);\n                  for (var j = 0; j < bodies.length; j++) {\n                    var body = bodies[j];\n                    var motionState = body.getMotionState();\n                    motionState.getWorldTransform(worldTransform);\n                    var position = worldTransform.getOrigin();\n                    var quaternion = worldTransform.getRotation();\n                    compose(position, quaternion, array, j * 16);\n                  }\n                  mesh.instanceMatrix.needsUpdate = true;\n                } else if (mesh.isMesh) {\n                  var _body2 = meshMap.get(mesh);\n                  var _motionState = _body2.getMotionState();\n                  _motionState.getWorldTransform(worldTransform);\n                  var _position = worldTransform.getOrigin();\n                  var _quaternion = worldTransform.getRotation();\n                  mesh.position.set(_position.x(), _position.y(), _position.z());\n                  mesh.quaternion.set(_quaternion.x(), _quaternion.y(), _quaternion.z(), _quaternion.w());\n                }\n              }\n            };\n            setMeshPosition = function _setMeshPosition(mesh, position) {\n              var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n              if (mesh.isInstancedMesh) {\n                var bodies = meshMap.get(mesh);\n                var body = bodies[index];\n                body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\n                body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\n                worldTransform.setIdentity();\n                worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n                body.setWorldTransform(worldTransform);\n              } else if (mesh.isMesh) {\n                var _body = meshMap.get(mesh);\n                _body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\n                _body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\n                worldTransform.setIdentity();\n                worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n                _body.setWorldTransform(worldTransform);\n              }\n            };\n            handleInstancedMesh = function _handleInstancedMesh(mesh, mass, shape) {\n              var array = mesh.instanceMatrix.array;\n              var bodies = [];\n              for (var i = 0; i < mesh.count; i++) {\n                var index = i * 16;\n                var transform = new AmmoLib.btTransform();\n                transform.setFromOpenGLMatrix(array.slice(index, index + 16));\n                var motionState = new AmmoLib.btDefaultMotionState(transform);\n                var localInertia = new AmmoLib.btVector3(0, 0, 0);\n                shape.calculateLocalInertia(mass, localInertia);\n                var rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n                var body = new AmmoLib.btRigidBody(rbInfo);\n                world.addRigidBody(body);\n                bodies.push(body);\n              }\n              if (mass > 0) {\n                mesh.instanceMatrix.setUsage(35048); // THREE.DynamicDrawUsage = 35048\n\n                meshes.push(mesh);\n                meshMap.set(mesh, bodies);\n              }\n            };\n            handleMesh = function _handleMesh(mesh, mass, shape) {\n              var position = mesh.position;\n              var quaternion = mesh.quaternion;\n              var transform = new AmmoLib.btTransform();\n              transform.setIdentity();\n              transform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n              transform.setRotation(new AmmoLib.btQuaternion(quaternion.x, quaternion.y, quaternion.z, quaternion.w));\n              var motionState = new AmmoLib.btDefaultMotionState(transform);\n              var localInertia = new AmmoLib.btVector3(0, 0, 0);\n              shape.calculateLocalInertia(mass, localInertia);\n              var rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n              var body = new AmmoLib.btRigidBody(rbInfo); // body.setFriction( 4 );\n\n              world.addRigidBody(body);\n              if (mass > 0) {\n                meshes.push(mesh);\n                meshMap.set(mesh, body);\n              }\n            };\n            addMesh = function _addMesh(mesh) {\n              var mass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n              var shape = getShape(mesh.geometry);\n              if (shape !== null) {\n                if (mesh.isInstancedMesh) {\n                  handleInstancedMesh(mesh, mass, shape);\n                } else if (mesh.isMesh) {\n                  handleMesh(mesh, mass, shape);\n                }\n              }\n            };\n            getShape = function _getShape(geometry) {\n              var parameters = geometry.parameters; // TODO change type to is*\n\n              if (geometry.type === 'BoxGeometry') {\n                var sx = parameters.width !== undefined ? parameters.width / 2 : 0.5;\n                var sy = parameters.height !== undefined ? parameters.height / 2 : 0.5;\n                var sz = parameters.depth !== undefined ? parameters.depth / 2 : 0.5;\n                var shape = new AmmoLib.btBoxShape(new AmmoLib.btVector3(sx, sy, sz));\n                shape.setMargin(0.05);\n                return shape;\n              } else if (geometry.type === 'SphereGeometry' || geometry.type === 'IcosahedronGeometry') {\n                var radius = parameters.radius !== undefined ? parameters.radius : 1;\n                var _shape = new AmmoLib.btSphereShape(radius);\n                _shape.setMargin(0.05);\n                return _shape;\n              }\n              return null;\n            };\n            if (!('Ammo' in window === false)) {\n              _context.next = 9;\n              break;\n            }\n            console.error(\"AmmoPhysics: Couldn't find Ammo.js\");\n            return _context.abrupt(\"return\");\n          case 9:\n            _context.next = 11;\n            return Ammo();\n          case 11:\n            AmmoLib = _context.sent;\n            // eslint-disable-line no-undef\n            frameRate = 60;\n            collisionConfiguration = new AmmoLib.btDefaultCollisionConfiguration();\n            dispatcher = new AmmoLib.btCollisionDispatcher(collisionConfiguration);\n            broadphase = new AmmoLib.btDbvtBroadphase();\n            solver = new AmmoLib.btSequentialImpulseConstraintSolver();\n            world = new AmmoLib.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\n            world.setGravity(new AmmoLib.btVector3(0, -9.8, 0));\n            worldTransform = new AmmoLib.btTransform(); //\n            meshes = [];\n            meshMap = new WeakMap(); //\n            //\n            lastTime = 0;\n            // animate\n\n            setInterval(step, 1000 / frameRate);\n            return _context.abrupt(\"return\", {\n              addMesh: addMesh,\n              setMeshPosition: setMeshPosition // addCompoundMesh\n            });\n          case 25:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _AmmoPhysics.apply(this, arguments);\n}\nfunction compose(position, quaternion, array, index) {\n  var x = quaternion.x(),\n    y = quaternion.y(),\n    z = quaternion.z(),\n    w = quaternion.w();\n  var x2 = x + x,\n    y2 = y + y,\n    z2 = z + z;\n  var xx = x * x2,\n    xy = x * y2,\n    xz = x * z2;\n  var yy = y * y2,\n    yz = y * z2,\n    zz = z * z2;\n  var wx = w * x2,\n    wy = w * y2,\n    wz = w * z2;\n  array[index + 0] = 1 - (yy + zz);\n  array[index + 1] = xy + wz;\n  array[index + 2] = xz - wy;\n  array[index + 3] = 0;\n  array[index + 4] = xy - wz;\n  array[index + 5] = 1 - (xx + zz);\n  array[index + 6] = yz + wx;\n  array[index + 7] = 0;\n  array[index + 8] = xz + wy;\n  array[index + 9] = yz - wx;\n  array[index + 10] = 1 - (xx + yy);\n  array[index + 11] = 0;\n  array[index + 12] = position.x();\n  array[index + 13] = position.y();\n  array[index + 14] = position.z();\n  array[index + 15] = 1;\n}\nexport { AmmoPhysics };","map":{"version":3,"names":["AmmoPhysics","_AmmoPhysics","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","AmmoLib","frameRate","collisionConfiguration","dispatcher","broadphase","solver","world","worldTransform","getShape","meshes","meshMap","addMesh","handleMesh","handleInstancedMesh","setMeshPosition","lastTime","step","wrap","_callee$","_context","prev","next","_step","time","performance","now","delta","stepSimulation","i","l","length","mesh","isInstancedMesh","array","instanceMatrix","bodies","get","j","body","motionState","getMotionState","getWorldTransform","position","getOrigin","quaternion","getRotation","compose","needsUpdate","isMesh","set","x","y","z","w","_setMeshPosition","index","undefined","setAngularVelocity","btVector3","setLinearVelocity","setIdentity","setOrigin","setWorldTransform","_handleInstancedMesh","mass","shape","count","transform","btTransform","setFromOpenGLMatrix","slice","btDefaultMotionState","localInertia","calculateLocalInertia","rbInfo","btRigidBodyConstructionInfo","btRigidBody","addRigidBody","push","setUsage","_handleMesh","setRotation","btQuaternion","_addMesh","geometry","_getShape","parameters","type","sx","width","sy","height","sz","depth","btBoxShape","setMargin","radius","btSphereShape","window","console","error","abrupt","Ammo","sent","btDefaultCollisionConfiguration","btCollisionDispatcher","btDbvtBroadphase","btSequentialImpulseConstraintSolver","btDiscreteDynamicsWorld","setGravity","WeakMap","setInterval","stop","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz"],"sources":["/home/danny/Documents/Programming/Solar/node_modules/three-stdlib/physics/AmmoPhysics.js"],"sourcesContent":["async function AmmoPhysics() {\n  if ('Ammo' in window === false) {\n    console.error(\"AmmoPhysics: Couldn't find Ammo.js\");\n    return;\n  }\n\n  const AmmoLib = await Ammo(); // eslint-disable-line no-undef\n\n  const frameRate = 60;\n  const collisionConfiguration = new AmmoLib.btDefaultCollisionConfiguration();\n  const dispatcher = new AmmoLib.btCollisionDispatcher(collisionConfiguration);\n  const broadphase = new AmmoLib.btDbvtBroadphase();\n  const solver = new AmmoLib.btSequentialImpulseConstraintSolver();\n  const world = new AmmoLib.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\n  world.setGravity(new AmmoLib.btVector3(0, -9.8, 0));\n  const worldTransform = new AmmoLib.btTransform(); //\n\n  function getShape(geometry) {\n    const parameters = geometry.parameters; // TODO change type to is*\n\n    if (geometry.type === 'BoxGeometry') {\n      const sx = parameters.width !== undefined ? parameters.width / 2 : 0.5;\n      const sy = parameters.height !== undefined ? parameters.height / 2 : 0.5;\n      const sz = parameters.depth !== undefined ? parameters.depth / 2 : 0.5;\n      const shape = new AmmoLib.btBoxShape(new AmmoLib.btVector3(sx, sy, sz));\n      shape.setMargin(0.05);\n      return shape;\n    } else if (geometry.type === 'SphereGeometry' || geometry.type === 'IcosahedronGeometry') {\n      const radius = parameters.radius !== undefined ? parameters.radius : 1;\n      const shape = new AmmoLib.btSphereShape(radius);\n      shape.setMargin(0.05);\n      return shape;\n    }\n\n    return null;\n  }\n\n  const meshes = [];\n  const meshMap = new WeakMap();\n\n  function addMesh(mesh, mass = 0) {\n    const shape = getShape(mesh.geometry);\n\n    if (shape !== null) {\n      if (mesh.isInstancedMesh) {\n        handleInstancedMesh(mesh, mass, shape);\n      } else if (mesh.isMesh) {\n        handleMesh(mesh, mass, shape);\n      }\n    }\n  }\n\n  function handleMesh(mesh, mass, shape) {\n    const position = mesh.position;\n    const quaternion = mesh.quaternion;\n    const transform = new AmmoLib.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n    transform.setRotation(new AmmoLib.btQuaternion(quaternion.x, quaternion.y, quaternion.z, quaternion.w));\n    const motionState = new AmmoLib.btDefaultMotionState(transform);\n    const localInertia = new AmmoLib.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    const rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    const body = new AmmoLib.btRigidBody(rbInfo); // body.setFriction( 4 );\n\n    world.addRigidBody(body);\n\n    if (mass > 0) {\n      meshes.push(mesh);\n      meshMap.set(mesh, body);\n    }\n  }\n\n  function handleInstancedMesh(mesh, mass, shape) {\n    const array = mesh.instanceMatrix.array;\n    const bodies = [];\n\n    for (let i = 0; i < mesh.count; i++) {\n      const index = i * 16;\n      const transform = new AmmoLib.btTransform();\n      transform.setFromOpenGLMatrix(array.slice(index, index + 16));\n      const motionState = new AmmoLib.btDefaultMotionState(transform);\n      const localInertia = new AmmoLib.btVector3(0, 0, 0);\n      shape.calculateLocalInertia(mass, localInertia);\n      const rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n      const body = new AmmoLib.btRigidBody(rbInfo);\n      world.addRigidBody(body);\n      bodies.push(body);\n    }\n\n    if (mass > 0) {\n      mesh.instanceMatrix.setUsage(35048); // THREE.DynamicDrawUsage = 35048\n\n      meshes.push(mesh);\n      meshMap.set(mesh, bodies);\n    }\n  } //\n\n\n  function setMeshPosition(mesh, position, index = 0) {\n    if (mesh.isInstancedMesh) {\n      const bodies = meshMap.get(mesh);\n      const body = bodies[index];\n      body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\n      body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\n      worldTransform.setIdentity();\n      worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n      body.setWorldTransform(worldTransform);\n    } else if (mesh.isMesh) {\n      const body = meshMap.get(mesh);\n      body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\n      body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\n      worldTransform.setIdentity();\n      worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n      body.setWorldTransform(worldTransform);\n    }\n  } //\n\n\n  let lastTime = 0;\n\n  function step() {\n    const time = performance.now();\n\n    if (lastTime > 0) {\n      const delta = (time - lastTime) / 1000; // console.time( 'world.step' );\n\n      world.stepSimulation(delta, 10); // console.timeEnd( 'world.step' );\n    }\n\n    lastTime = time; //\n\n    for (let i = 0, l = meshes.length; i < l; i++) {\n      const mesh = meshes[i];\n\n      if (mesh.isInstancedMesh) {\n        const array = mesh.instanceMatrix.array;\n        const bodies = meshMap.get(mesh);\n\n        for (let j = 0; j < bodies.length; j++) {\n          const body = bodies[j];\n          const motionState = body.getMotionState();\n          motionState.getWorldTransform(worldTransform);\n          const position = worldTransform.getOrigin();\n          const quaternion = worldTransform.getRotation();\n          compose(position, quaternion, array, j * 16);\n        }\n\n        mesh.instanceMatrix.needsUpdate = true;\n      } else if (mesh.isMesh) {\n        const body = meshMap.get(mesh);\n        const motionState = body.getMotionState();\n        motionState.getWorldTransform(worldTransform);\n        const position = worldTransform.getOrigin();\n        const quaternion = worldTransform.getRotation();\n        mesh.position.set(position.x(), position.y(), position.z());\n        mesh.quaternion.set(quaternion.x(), quaternion.y(), quaternion.z(), quaternion.w());\n      }\n    }\n  } // animate\n\n\n  setInterval(step, 1000 / frameRate);\n  return {\n    addMesh: addMesh,\n    setMeshPosition: setMeshPosition // addCompoundMesh\n\n  };\n}\n\nfunction compose(position, quaternion, array, index) {\n  const x = quaternion.x(),\n        y = quaternion.y(),\n        z = quaternion.z(),\n        w = quaternion.w();\n  const x2 = x + x,\n        y2 = y + y,\n        z2 = z + z;\n  const xx = x * x2,\n        xy = x * y2,\n        xz = x * z2;\n  const yy = y * y2,\n        yz = y * z2,\n        zz = z * z2;\n  const wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n  array[index + 0] = 1 - (yy + zz);\n  array[index + 1] = xy + wz;\n  array[index + 2] = xz - wy;\n  array[index + 3] = 0;\n  array[index + 4] = xy - wz;\n  array[index + 5] = 1 - (xx + zz);\n  array[index + 6] = yz + wx;\n  array[index + 7] = 0;\n  array[index + 8] = xz + wy;\n  array[index + 9] = yz - wx;\n  array[index + 10] = 1 - (xx + yy);\n  array[index + 11] = 0;\n  array[index + 12] = position.x();\n  array[index + 13] = position.y();\n  array[index + 14] = position.z();\n  array[index + 15] = 1;\n}\n\nexport { AmmoPhysics };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}